[{"title":"(02) Future模式之CompletableFuture","date":"2019-05-20T02:29:49.000Z","path":"2019/05/20/Java/02-Future模式之CompletableFuture/","content":"<p>CompletableFuture 是Java 8 新增加的Api,该类实现，Future和CompletionStage两个接口，提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p>\n<h3 id=\"一、主动完成计算\"><a href=\"#一、主动完成计算\" class=\"headerlink\" title=\"一、主动完成计算\"></a>一、主动完成计算</h3><a id=\"more\"></a>\n<ul>\n<li><p>public T get() </p>\n<p>  该方法为阻塞方法，会等待计算结果完成</p>\n</li>\n<li><p>public T get(long timeout,TimeUnit unit)</p>\n<p>  有时间限制的阻塞方法</p>\n</li>\n<li><p>public T getNow(T valueIfAbsent)</p>\n<p>  立即获取方法结果，如果没有计算结束则返回传的值</p>\n</li>\n<li><p>public T join()</p>\n<p>  和 get() 方法类似也是主动阻塞线程，等待计算结果。和get() 方法有细微的差别</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">long</span> ms)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(ms);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">            ThreadUtil.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">10</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">//       System.out.println(future.join());</span></span><br><span class=\"line\"><span class=\"comment\">//       System.out.println(future.get());</span></span><br><span class=\"line\">    System.out.println(future.getNow(<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>public boolean complete(T value) </p>\n<p>  立即完成计算，并把结果设置为传的值，返回是否设置成功</p>\n<p>  如果 CompletableFuture 没有关联任何的Callback、异步任务等，如果调用get方法，那会一直阻塞下去，可以使用complete方法主动完成计算</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    CompletableFuture&lt;Integer&gt; future = <span class=\"keyword\">new</span> CompletableFuture&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//        future.get();</span></span><br><span class=\"line\">    future.complete(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>public boolean completeExceptionally(Throwable ex)<br>  立即完成计算，并抛出异常</li>\n</ul>\n<h3 id=\"二、执行异步任务\"><a href=\"#二、执行异步任务\" class=\"headerlink\" title=\"二、执行异步任务\"></a>二、执行异步任务</h3><p>创建一个异步任务</p>\n<ul>\n<li><p>public static \\&lt;U> CompletableFuture\\&lt;U>    completedFuture(U value)</p>\n<p>  创建一个有初始值的CompletableFuture</p>\n</li>\n<li><p>public static CompletableFuture<void>     runAsync(Runnable runnable)</void></p>\n</li>\n<li>public static CompletableFuture<void>     runAsync(Runnable runnable, Executor executor)</void></li>\n<li>public static \\<u> CompletableFuture\\<u>     supplyAsync(Supplier\\<u> supplier)</u></u></u></li>\n<li><p>public static \\<u> CompletableFuture\\<u>     supplyAsync(Supplier\\<u> supplier, Executor executor)</u></u></u></p>\n<p>  以上四个方法中，以 Async 结尾并且没有 Executor 参数的，会默认使用 ForkJoinPool.commonPool() 作为它的线程池执行异步代码。<br>  以run开头的，因为以 Runable 类型为参数所以没有返回值。示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">    CompletableFuture&lt;Void&gt; future1 = CompletableFuture.runAsync(() -&gt; System.out.println(<span class=\"string\">\"runAsync\"</span>));</span><br><span class=\"line\">    CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(future1.get());</span><br><span class=\"line\">    System.out.println(future2.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync</span><br><span class=\"line\">null</span><br><span class=\"line\">supplyAsync</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、计算完成时对结果的处理-whenComplete-exceptionally-handle\"><a href=\"#三、计算完成时对结果的处理-whenComplete-exceptionally-handle\" class=\"headerlink\" title=\"三、计算完成时对结果的处理 whenComplete/exceptionally/handle\"></a>三、计算完成时对结果的处理 whenComplete/exceptionally/handle</h3><p>当CompletableFuture的计算结果完成，或者抛出异常的时候，我们可以执行特定的Action。主要是下面的方法：</p>\n<ul>\n<li>public CompletableFuture<t>     whenComplete(BiConsumer&lt;? super T,? super Throwable&gt; action)</t></li>\n<li>public CompletableFuture<t>     whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action)</t></li>\n<li>public CompletableFuture<t>     whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action, Executor executor)</t></li>\n</ul>\n<p>参数类型为 BiConsumer&lt;? super T, ? super Throwable&gt; 会获取上一步计算的计算结果和异常信息。以Async结尾的方法可能会使用其它的线程去执行,如果使用相同的线程池，也可能会被同一个线程选中执行,以下皆相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        ThreadUtil.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;).whenCompleteAsync((v, e) -&gt; &#123;</span><br><span class=\"line\">        System.out.println(v);</span><br><span class=\"line\">        System.out.println(e);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    System.out.println(future.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>public CompletableFuture<t>  exceptionally(Function&lt;Throwable,? extends T&gt; fn)</t></p>\n<p>  该方法是对异常情况的处理，当函数异常时应该的返回值</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        ThreadUtil.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;).whenCompleteAsync((v, e) -&gt; &#123;</span><br><span class=\"line\">        System.out.println(v);</span><br><span class=\"line\">        System.out.println(e);</span><br><span class=\"line\">    &#125;).exceptionally((e) -&gt; &#123;</span><br><span class=\"line\">        System.out.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    System.out.println(future.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>public \\&lt;U>CompletableFuture\\&lt;U> handle(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)</li>\n<li>public \\&lt;U>CompletableFuture\\&lt;U> handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)</li>\n<li>public \\&lt;U> CompletableFuture\\&lt;U> handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn, Executor executor)</li>\n</ul>\n<p>handle 方法和whenComplete方法类似，只不过接收的是一个 BiFunction&lt;? super T,Throwable,? extends U&gt; fn 类型的参数，因此有 whenComplete 方法和 转换的功能 (thenApply)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">    CompletableFuture&lt;Integer&gt; future = CompletableFuture</span><br><span class=\"line\">            .supplyAsync(() -&gt; <span class=\"number\">10</span> / <span class=\"number\">0</span>)</span><br><span class=\"line\">            .handle((t, e) -&gt; &#123;</span><br><span class=\"line\">                System.out.println(e.getMessage());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(future.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、结果处理转换-thenApply\"><a href=\"#四、结果处理转换-thenApply\" class=\"headerlink\" title=\"四、结果处理转换 thenApply\"></a>四、结果处理转换 thenApply</h3><p> CompletableFuture 由于有回调，可以不必等待一个计算完成而阻塞着调用县城，可以在一个结果计算完成之后紧接着执行某个Action。我们可以将这些操作串联起来。</p>\n<ul>\n<li>public \\&lt;U> CompletableFuture\\&lt;U>     thenApply(Function&lt;? super T,? extends U&gt; fn)</li>\n<li>public \\&lt;U> CompletableFuture\\&lt;U>     thenApplyAsync(Function&lt;? super T,? extends U&gt; fn)</li>\n<li>public \\&lt;U> CompletableFuture\\&lt;U>     thenApplyAsync(Function&lt;? super T,? extends U&gt; fn, Executor executor)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">       CompletableFuture&lt;Integer&gt; future = CompletableFuture</span><br><span class=\"line\">               .supplyAsync(() -&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">               .thenApply((a) -&gt; &#123;</span><br><span class=\"line\">                   System.out.println(a);<span class=\"comment\">//1</span></span><br><span class=\"line\">                   <span class=\"keyword\">return</span> a * <span class=\"number\">10</span>;</span><br><span class=\"line\">               &#125;).thenApply((a) -&gt; &#123;</span><br><span class=\"line\">                   System.out.println(a);<span class=\"comment\">//10</span></span><br><span class=\"line\">                   <span class=\"keyword\">return</span> a + <span class=\"number\">10</span>;</span><br><span class=\"line\">               &#125;).thenApply((a) -&gt; &#123;</span><br><span class=\"line\">                   System.out.println(a);<span class=\"comment\">//20</span></span><br><span class=\"line\">                   <span class=\"keyword\">return</span> a - <span class=\"number\">5</span>;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">       System.out.println(future.get());<span class=\"comment\">//15</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这些方法不是马上执行的，也不会阻塞，而是前一个执行完成后继续执行下一个。</p>\n<p>和 handle 方法的区别是，handle 会处理正常计算值和异常，不会抛出异常。而 thenApply 只会处理正常计算值，有异常则抛出。</p>\n<h3 id=\"五、纯消费-thenAccept-thenAcceptBoth-thenRun\"><a href=\"#五、纯消费-thenAccept-thenAcceptBoth-thenRun\" class=\"headerlink\" title=\"五、纯消费 thenAccept/thenAcceptBoth/thenRun\"></a>五、纯消费 thenAccept/thenAcceptBoth/thenRun</h3><p>  单纯的去消费结果而不会返回新的值，因些计算结果为 Void;</p>\n<ul>\n<li>public CompletableFuture<void>     thenAccept(Consumer&lt;? super T&gt; action)</void></li>\n<li>public CompletableFuture<void>     thenAcceptAsync(Consumer&lt;? super T&gt; action)</void></li>\n<li>public CompletableFuture<void>     thenAcceptAsync(Consumer&lt;? super T&gt; action, Executor executor)</void></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CompletableFuture&lt;Void&gt; future = CompletableFuture</span><br><span class=\"line\">            .supplyAsync(() -&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            .thenAccept(System.out::println) <span class=\"comment\">//消费 上一级返回值 1</span></span><br><span class=\"line\">            .thenAcceptAsync(System.out::println); <span class=\"comment\">//上一级没有返回值 输出null</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    System.out.println(future.get()); <span class=\"comment\">//消费函数没有返回值 输出null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>public \\&lt;U> CompletableFuture<void>     thenAcceptBoth(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action)</void></li>\n<li>public \\&lt;U> CompletableFuture<void>     thenAcceptBothAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action)</void></li>\n<li>public \\&lt;U> CompletableFuture<void>     thenAcceptBothAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action, Executor executor)</void></li>\n</ul>\n<p>和 thenAccept 相比，参数类型多了一个 CompletionStage&lt;? extends U&gt; other,以上方法会接收上一个CompletionStage返回值，和当前的一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">    CompletableFuture</span><br><span class=\"line\">            .supplyAsync(() -&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            .thenAcceptBoth(CompletableFuture.supplyAsync(() -&gt; <span class=\"number\">2</span>), (a, b) -&gt; &#123;</span><br><span class=\"line\">                System.out.println(a);</span><br><span class=\"line\">                System.out.println(b);</span><br><span class=\"line\">            &#125;).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>public     CompletableFuture<void>     runAfterBoth(CompletionStage&lt;?&gt; other,  Runnable action)</void></p>\n<p>runAfterBoth 和以上方法不同，传一个 Runnable 类型的参数，不接收上一级的返回值</p>\n</li>\n</ul>\n<hr>\n<p> 更彻底的：</p>\n<ul>\n<li>public CompletableFuture<void>    thenRun(Runnable action)</void></li>\n<li>public CompletableFuture<void>    thenRunAsync(Runnable action)</void></li>\n<li>public CompletableFuture<void>     thenRunAsync(Runnable action, Executor executor)</void></li>\n</ul>\n<p>以上是彻底的纯消费，完全忽略计算结果</p>\n<h3 id=\"六、组合-thenCompose-thenCombine\"><a href=\"#六、组合-thenCompose-thenCombine\" class=\"headerlink\" title=\"六、组合 thenCompose/thenCombine\"></a>六、组合 thenCompose/thenCombine</h3><ul>\n<li>public \\&lt;U> CompletableFuture\\&lt;U>     thenCompose(Function&lt;? super T,? extends CompletionStage\\<u>&gt; fn)</u></li>\n<li>public \\&lt;U> CompletableFuture\\&lt;U>     thenComposeAsync(Function&lt;? super T,? extends CompletionStage\\<u>&gt; fn)</u></li>\n<li>public \\&lt;U> CompletableFuture\\&lt;U>     thenComposeAsync(Function&lt;? super T,? extends CompletionStage\\<u>&gt; fn, Executor executor)</u></li>\n</ul>\n<p>以上接收类型为 Function&lt;? super T,? extends CompletionStage\\&lt;U>&gt; fn ,fn 接收上一级返回的结果，并返回一个新的 CompletableFuture</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     CompletableFuture&lt;Integer&gt; future = CompletableFuture</span><br><span class=\"line\">             .supplyAsync(() -&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">             .thenApply((a) -&gt; &#123;</span><br><span class=\"line\">                 ThreadUtil.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> a + <span class=\"number\">10</span>;</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">             .thenCompose((s) -&gt; &#123;</span><br><span class=\"line\">                 System.out.println(s); <span class=\"comment\">//11</span></span><br><span class=\"line\">                 <span class=\"keyword\">return</span> CompletableFuture.supplyAsync(() -&gt; s * <span class=\"number\">5</span>);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(future.get());<span class=\"comment\">//55</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>public &lt;U,V&gt; CompletableFuture<v>     thenCombine(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn)</v></li>\n<li>public &lt;U,V&gt; CompletableFuture<v>     thenCombineAsync(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn)</v></li>\n<li>public &lt;U,V&gt; CompletableFuture<v>     thenCombineAsync(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn, Executor executor)</v></li>\n</ul>\n<p>两个CompletionStage是并行执行的，它们之间并没有先后依赖顺序，other并不会等待先前的CompletableFuture执行完毕后再执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        CompletableFuture&lt;Integer&gt; future = CompletableFuture</span><br><span class=\"line\">                .supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">                    ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"supplyAsync\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;).thenApply((a) -&gt; &#123;</span><br><span class=\"line\">                    ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"thenApply\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> a * <span class=\"number\">3</span>;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .thenCombine(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">                    ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"thenCombineAsync\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">                &#125;), (a, b) -&gt; &#123;</span><br><span class=\"line\">                    System.out.println(a);</span><br><span class=\"line\">                    System.out.println(b);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(future.get());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>thenCombine 和 supplyAsync 不一定哪个先哪个后，是并行执行的。</p>\n<h3 id=\"七、acceptEither-applyToEither\"><a href=\"#七、acceptEither-applyToEither\" class=\"headerlink\" title=\"七、acceptEither / applyToEither\"></a>七、acceptEither / applyToEither</h3><ul>\n<li>public CompletableFuture<void>     acceptEither(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action)</void></li>\n<li>public CompletableFuture<void>     acceptEitherAsync(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action)</void></li>\n<li>public CompletableFuture<void>     acceptEitherAsync(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action, Executor executor)</void></li>\n</ul>\n<p>先看示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">    Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    CompletableFuture</span><br><span class=\"line\">            .supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">                ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .acceptEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">                ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">            &#125;), System.out::println)</span><br><span class=\"line\">            .get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码有时输出A，有时输出B，哪个Future先执行完就会根据它的结果计算。</p>\n<p>acceptEither方法是当任意一个 CompletionStage 完成的时候，action 这个消费者就会被执行。这个方法返回 CompletableFuture<void></void></p>\n<hr>\n<ul>\n<li>public \\<u> CompletableFuture\\<u>     applyToEither(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn)</u></u></li>\n<li>public \\<u> CompletableFuture\\<u>     applyToEitherAsync(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn)</u></u></li>\n<li>public \\<u> CompletableFuture\\<u>     applyToEitherAsync(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn, Executor executor)</u></u></li>\n</ul>\n<p>applyToEither 方法是当任意一个 CompletionStage 完成的时候，fn会被执行，它的返回值会当作新的CompletableFuture\\<u>的计算结果。</u></p>\n<blockquote>\n<p>acceptEither 没有返回值，applyToEither 有返回值</p>\n</blockquote>\n<h3 id=\"八、allOf-anyOf\"><a href=\"#八、allOf-anyOf\" class=\"headerlink\" title=\"八、allOf / anyOf\"></a>八、allOf / anyOf</h3><ul>\n<li>public static CompletableFuture<void>         allOf(CompletableFuture&lt;?&gt;… cfs)</void></li>\n</ul>\n<p>这个方法的意思是把有方法都执行完才往下执行，没有返回值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">     CompletableFuture.allOf(</span><br><span class=\"line\">             CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">                 ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                 System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\">             &#125;),</span><br><span class=\"line\">             CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">                 ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                 System.out.println(<span class=\"number\">2</span>);</span><br><span class=\"line\">             &#125;))</span><br><span class=\"line\">             .get();</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>有时输出1 2 有时输出 2 1</p>\n<hr>\n<ul>\n<li>public static CompletableFuture<object>     anyOf(CompletableFuture&lt;?&gt;… cfs)</object></li>\n</ul>\n<p>任务一个方法执行完都往下执行，返回一个Object类型的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">      Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">      Object obj = CompletableFuture.anyOf(</span><br><span class=\"line\">              CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">                  ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">              &#125;),</span><br><span class=\"line\">              CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">                  ThreadUtil.sleep(random.nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">              &#125;)).get();</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(obj);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果有时为1 有时间为 2 </p>\n","link":"","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"(01) BigDecimal 详解","date":"2019-05-20T02:29:03.000Z","path":"2019/05/20/Java/01-BigDecimal-详解/","content":"<h3 id=\"一、常用方法\"><a href=\"#一、常用方法\" class=\"headerlink\" title=\"一、常用方法\"></a>一、常用方法</h3><ol>\n<li>初始化数据方法<ul>\n<li>new BigDecimal() 传参支持 integer,long,double,float,BigInteger</li>\n<li>BigDecimal.ZERO  初始化一个为0的BigDecimal对象</li>\n<li>BigDecimal.ONE 初始化一个为1的BigDecimal对象</li>\n<li>BigDecimal.TEN 初始化一个为10的BigDecimal对象<blockquote>\n<p>【注意】new BigDecimal()方法初始化一个浮点型数据时，需要显示设置Scale(精度)否则运算时可能会有精度问题(这个和BigDecimal 默认精度有关)，如果转成String再初始化，将不受影响</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>加法 add(BigDecimal)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  BigDecimal b1 = new BigDecimal(&quot;1&quot;);</span><br><span class=\"line\">  BigDecimal b2 = new BigDecimal(&quot;0.11&quot;);</span><br><span class=\"line\">  System.out.println(b1.add(b2));</span><br><span class=\"line\">/*</span><br><span class=\"line\">* 可以试下把传入的字符串改为基本数据类型再进行运算</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>减法 subtract(BigDecimal)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1&quot;);</span><br><span class=\"line\">BigDecimal b2 = new BigDecimal(&quot;0.11&quot;);</span><br><span class=\"line\">System.out.println(b1.subtract(b2));</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>乘法 muliply(BigDecimal)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.11&quot;);</span><br><span class=\"line\">BigDecimal b2 = new BigDecimal(&quot;0.11&quot;);</span><br><span class=\"line\">System.out.println(b1.multiply(b2));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>除法 divide(BigDecimal)</p>\n</li>\n</ol>\n<ul>\n<li>做除法运算时需要制定精确度和舍入方式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.11&quot;);</span><br><span class=\"line\">BigDecimal b2 = new BigDecimal(&quot;0.11&quot;);</span><br><span class=\"line\">//四舍五入保留两位小数 后文将介绍舍入方式</span><br><span class=\"line\">System.out.println(b1.divide(b2,2,BigDecimal.ROUND_HALF_UP));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>绝对值 abs()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;-1.11&quot;);</span><br><span class=\"line\">System.out.println(b1.abs());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>相反数 negate()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.11&quot;);</span><br><span class=\"line\">System.out.println(b1.negate());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>乘法 pow(int)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.11&quot;);</span><br><span class=\"line\">//二次方</span><br><span class=\"line\">System.out.println(b1.pow(2));</span><br><span class=\"line\">//三次方</span><br><span class=\"line\">System.out.println(b1.pow(3));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>精度 scale()和percision()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;11.111&quot;);</span><br><span class=\"line\">//位数</span><br><span class=\"line\">System.out.println(b1.precision());//5</span><br><span class=\"line\">//小数点后有多少位</span><br><span class=\"line\">System.out.println(b1.scale());//3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较大小 compareTo(BigDecimal)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.11&quot;);</span><br><span class=\"line\">BigDecimal b2 = new BigDecimal(&quot;0.11&quot;);</span><br><span class=\"line\">//大于0 则b1&gt;b2；等于0 则b1==b2;小于0 则b1&lt;b2</span><br><span class=\"line\">System.out.println(b1.compareTo(b2));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较大小并返回大的 max(BigDecimal)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.11&quot;);</span><br><span class=\"line\">BigDecimal b2 = new BigDecimal(&quot;0.11&quot;);</span><br><span class=\"line\">System.out.println(b1.max(b2));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较大小并返回小的 min(BigDecimal)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.11&quot;);</span><br><span class=\"line\">BigDecimal b2 = new BigDecimal(&quot;0.11&quot;);</span><br><span class=\"line\">System.out.println(b1.min(b2));</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"二、舍入方式\"><a href=\"#二、舍入方式\" class=\"headerlink\" title=\"二、舍入方式\"></a>二、舍入方式</h3><ul>\n<li><p><strong>BigDecimal.ROUND_HALF_UP</strong><br><strong><em>四舍五入模式</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.1449&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(2, BigDecimal.ROUND_HALF_UP));//1.14</span><br><span class=\"line\">System.out.println(b1.setScale(3, BigDecimal.ROUND_HALF_UP));//1.145</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>BigDecimal.ROUND_HALF_DOWN</strong><br><strong><em>五舍六入模式</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.1456&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(1, BigDecimal.ROUND_HALF_DOWN));//1.1</span><br><span class=\"line\">System.out.println(b1.setScale(2, BigDecimal.ROUND_HALF_DOWN));//1.15</span><br><span class=\"line\">System.out.println(b1.setScale(3, BigDecimal.ROUND_HALF_DOWN));//1.146</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>BigDecimal.ROUND_HALF_EVEN</strong><br><strong><em>银行家舍入法</em></strong><br>如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同;<br>如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.25&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(1, BigDecimal.ROUND_HALF_EVEN));//1.2</span><br><span class=\"line\">b1 = new BigDecimal(&quot;1.26&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(1, BigDecimal.ROUND_HALF_EVEN));//1.3</span><br><span class=\"line\">b1 = new BigDecimal(&quot;1.35&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(1, BigDecimal.ROUND_HALF_EVEN));//1.4</span><br><span class=\"line\">b1 = new BigDecimal(&quot;1.36&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(1, BigDecimal.ROUND_HALF_EVEN));//1.4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>BigDecimal.ROUND_UP</strong><br>始终在保留的最后一位加1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.1203&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(2, BigDecimal.ROUND_UP));//1.13</span><br><span class=\"line\">System.out.println(b1.setScale(3, BigDecimal.ROUND_UP));//1.121</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p> 永远不会减少计算值的大小</p>\n</blockquote>\n<ul>\n<li><strong>BigDecimal.ROUND_DOWN</strong><br>从舍弃位置直接截断<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.1209&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(2, BigDecimal.ROUND_DOWN));//1.12</span><br><span class=\"line\">System.out.println(b1.setScale(3, BigDecimal.ROUND_DOWN));//1.120</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p> 永远不会增加计算值的大小</p>\n</blockquote>\n<ul>\n<li><strong>BigDecimal.ROUND_CEILING</strong><br>接近正无穷大的舍入模式。<br>如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同;<br>如果为负，则舍入行为与 ROUND_DOWN 相同。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.1209&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(2, BigDecimal.ROUND_CEILING));//1.13</span><br><span class=\"line\">System.out.println(b1.setScale(3, BigDecimal.ROUND_CEILING));//1.121</span><br><span class=\"line\"></span><br><span class=\"line\">BigDecimal b2 = b1.negate();//b1的相反数</span><br><span class=\"line\">System.out.println(b2.setScale(2, BigDecimal.ROUND_CEILING));//-1.12</span><br><span class=\"line\">System.out.println(b2.setScale(3, BigDecimal.ROUND_CEILING));//-1.120</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>此舍入模式始终不会减少计算值。</p>\n</blockquote>\n<ul>\n<li><strong>BigDecimal.ROUND_FLOOR</strong><br>和ROUND_CEILING相反<br>接近负无穷大的舍入模式。<br>如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同;<br>如果为负，则舍入行为与 ROUND_UP 相同。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.1209&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(2, BigDecimal.ROUND_FLOOR));//1.12</span><br><span class=\"line\">System.out.println(b1.setScale(3, BigDecimal.ROUND_FLOOR));//1.120</span><br><span class=\"line\"></span><br><span class=\"line\">BigDecimal b2 = b1.negate();</span><br><span class=\"line\">System.out.println(b2.setScale(2, BigDecimal.ROUND_FLOOR));//-1.13</span><br><span class=\"line\">System.out.println(b2.setScale(3, BigDecimal.ROUND_FLOOR));//-1.121</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>注意，此舍入模式始终不会增加计算值。</p>\n</blockquote>\n<ul>\n<li><strong>BigDecimal.ROUND_UNNECESSARY</strong><br>断言请求的操作具有精确的结果，因此不需要舍入。<br>如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal b1 = new BigDecimal(&quot;1.25&quot;);</span><br><span class=\"line\">System.out.println(b1.setScale(2, BigDecimal.ROUND_UNNECESSARY));//1.25</span><br><span class=\"line\">System.out.println(b1.setScale(1, BigDecimal.ROUND_UNNECESSARY));//throw ArithmeticException</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"三、与之相关的两个类\"><a href=\"#三、与之相关的两个类\" class=\"headerlink\" title=\"三、与之相关的两个类\"></a>三、与之相关的两个类</h3><ol>\n<li><p>java.math.MathContext<br>该对象是封装上下文设置的不可变对象，它描述数字运算符的某些规则，如数据的精度，舍入方式等  </p>\n<ul>\n<li><p>MathContext.DECIMAL32<br>一个 MathContext 对象,其精度设置与 IEEE 754R Decimal32 格式(即 7 个数字)匹配,舍入模式为 HALF_EVEN,这是 IEEE 754R 的默认舍入模式。</p>\n</li>\n<li><p>MathContext.DECIMAL64<br>一个 MathContext 对象,其精度设置与 IEEE 754R Decimal64 格式(即 16 个数字)匹配,舍入模式为 HALF_EVEN,这是 IEEE 754R 的默认舍入模式。</p>\n</li>\n<li><p>MathContext.DECIMAL128 一个 MathContext 对象,其精度设置与 IEEE 754R Decimal128 格式(即 34 个数字)匹配,舍入模式为 HALF_EVEN,这是 IEEE 754R 的默认舍入模式。</p>\n</li>\n<li><p>MathContext.UNLIMITED<br>其设置具有无限精度算法所需值的 MathContext 对象。</p>\n</li>\n</ul>\n</li>\n<li>java.math.RoundingMode<br>枚举类，定义常用的数据舍入方式<ul>\n<li>HALF_UP(BigDecimal.ROUND_HALF_UP)</li>\n<li>HALF_DOWN(BigDecimal.ROUND_HALF_DOWN)</li>\n<li>HALF_EVEN(BigDecimal.ROUND_HALF_EVEN)</li>\n<li>UP(BigDecimal.ROUND_UP)</li>\n<li>DOWN(BigDecimal.ROUND_DOWN)</li>\n<li>CEILING(BigDecimal.ROUND_CEILING)</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>FLOOR(BigDecimal.ROUND_FLOOR)</li>\n<li>UNNECESSARY(BigDecimal.ROUND_UNNECESSARY)<blockquote>\n<p>【注】详见第二部分：舍入方式</p>\n</blockquote>\n</li>\n</ul>\n","link":"","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"(13) SpringBoot 动手写一个Start","date":"2019-05-20T02:27:40.000Z","path":"2019/05/20/SpringBoot/13-SpringBoot-动手写一个Start/","content":"<p>我们在使用SpringBoot 项目时，引入一个springboot start依赖，只需要很少的代码，或者不用任何代码就能直接使用默认配置，再也不用那些繁琐的配置了，感觉特别神奇。我们自己也动手写一个start.</p>\n<h3 id=\"一、新建一个-Start-的-Maven-项目\"><a href=\"#一、新建一个-Start-的-Maven-项目\" class=\"headerlink\" title=\"一、新建一个 Start 的 Maven 项目\"></a>一、新建一个 Start 的 Maven 项目</h3><a id=\"more\"></a>\n<ol>\n<li>pom 文件如下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>spring-boot-autoconfigure springboot 自动配置的核心依赖</li>\n<li>spring-boot-starter-test 测试包</li>\n<li>lombok 省去 getter/setter 等简化代码</li>\n</ul>\n<ol start=\"2\">\n<li>演示代码</li>\n</ol>\n<p>DemoService:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getMessage</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">getCode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>DemoServiceImpl:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>DemoAutoConfiguration:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(DemoService.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DemoService <span class=\"title\">demoService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoServiceImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>@Configuration 标注该类为一个配置类</li>\n<li>ConditionalOnMissingBean(DemoService.class) 条件注解</li>\n</ul>\n<blockquote>\n<p>spingboot 的自动注解主要还是用这些条件注解来实现的。请查看之前的文章：</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5c6c2189e51d45713911466d\" target=\"_blank\" rel=\"noopener\">Spring Boot 自动配置之条件注解</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5c761c096fb9a049b41d2299\" target=\"_blank\" rel=\"noopener\">Spring Boot 自动配置之@Enable*与@Import注解</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5c7c7d4df265da2dcc800e87\" target=\"_blank\" rel=\"noopener\">Spring Boot 自动配置之@EnableAutoConfiguration</a></p>\n</blockquote>\n<ol start=\"3\">\n<li>让springboot 识别自动自动配置的代码</li>\n</ol>\n<p>需要在resources下新建文件META-INF/spring.factories</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.jiuxian.DemoAutoConfiguration</span><br></pre></td></tr></table></figure>\n<p>SpringBoot 中的注解 @EnableAutoConfiguration 在项目启动的时候会通过 SpringFactoriesLoader.loadFactoryNames 方法获取 spring.factories 文件下的配置类</p>\n<ol start=\"4\">\n<li>测试类</li>\n</ol>\n<ul>\n<li>首先需要再包下建 Application run 的main 方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StartDemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(StartDemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StartDemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String message = demoService.getMessage();</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">\"Hello!\"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer code = demoService.getCode();</span><br><span class=\"line\">        System.out.println(code);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"number\">123</span>, (<span class=\"keyword\">int</span>) code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果没有 StartDemoApplication 这个类则测试类启动的时候会报 @SpringBootApplication 找不到错误</p>\n</blockquote>\n<h3 id=\"二、新建-springboot-项目引入刚写的start项目\"><a href=\"#二、新建-springboot-项目引入刚写的start项目\" class=\"headerlink\" title=\"二、新建 springboot 项目引入刚写的start项目\"></a>二、新建 springboot 项目引入刚写的start项目</h3><ol>\n<li>service</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">message</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"code:\"</span> + demoService.getCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"message:\"</span> + demoService.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    testService.message();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code:123</span><br><span class=\"line\">message:Hello!</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><p>重写DemoService方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code:123</span><br><span class=\"line\">message:Hello!</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>之所以这样的结果，是因为在start项目中的DemoService 实现类中有一个 @ConditionalOnMissingBean(DemoService.class) 的注解，如果不存在则使用默认的</p>\n<h3 id=\"三、Demo-源码\"><a href=\"#三、Demo-源码\" class=\"headerlink\" title=\"三、Demo 源码\"></a>三、Demo 源码</h3><p><a href=\"https://github.com/Zejun-Liu/springboot-start-demo.git\" target=\"_blank\" rel=\"noopener\">GitHub源码地址</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(12) SpringBoot 之事件(Event)","date":"2019-05-20T02:26:59.000Z","path":"2019/05/20/SpringBoot/12-SpringBoot-之事件-Event/","content":"<p>Spring 官方文档翻译如下 ：</p>\n<p><em>ApplicationContext 通过 ApplicationEvent 类和 ApplicationListener 接口进行事件处理。 如果将实现 ApplicationListener 接口的 bean 注入到上下文中，则每次使用 ApplicationContext 发布 ApplicationEvent 时，都会通知该 bean。 本质上，这是标准的观察者设计模式。</em></p>\n<p>Spring的事件（Application Event）其实就是一个观察者设计模式，一个 Bean 处理完成任务后希望通知其它 Bean 或者说 一个Bean 想观察监听另一个Bean的行为。<br><a id=\"more\"></a><br>Spring 事件只需要几步：</p>\n<ul>\n<li>自定义事件，继承 ApplicationEvent</li>\n<li>定义监听器，实现 ApplicationListener 或者通过 @EventListener 注解到方法上</li>\n<li>定义发布者，通过 ApplicationEventPublisher </li>\n</ul>\n<p>代码示例：</p>\n<h4 id=\"1-自定义Event\"><a href=\"#1-自定义Event\" class=\"headerlink\" title=\"1. 自定义Event\"></a>1. 自定义Event</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoEvent</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationEvent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoEvent</span><span class=\"params\">(Object source, Long id, String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(source);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-监听器\"><a href=\"#2-监听器\" class=\"headerlink\" title=\"2. 监听器\"></a>2. 监听器</h4><ul>\n<li>实现ApplicationListener 接口<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">DemoEvent</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(DemoEvent demoEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;DemoListener&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"收到了：\"</span> + demoEvent.getSource() + <span class=\"string\">\"消息;时间：\"</span> + demoEvent.getTimestamp());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息：\"</span> + demoEvent.getId() + <span class=\"string\">\":\"</span> + demoEvent.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>泛型为需要监听的事件类型</p>\n</blockquote>\n<ul>\n<li>@EventListener<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoListener2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(DemoEvent demoEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;DemoListener2&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"收到了：\"</span> + demoEvent.getSource() + <span class=\"string\">\"消息;时间：\"</span> + demoEvent.getTimestamp());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息：\"</span> + demoEvent.getId() + <span class=\"string\">\":\"</span> + demoEvent.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>参数为需要监听的事件类型</p>\n</blockquote>\n<h4 id=\"3-消息发布者\"><a href=\"#3-消息发布者\" class=\"headerlink\" title=\"3. 消息发布者\"></a>3. 消息发布者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoPublisher</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoPublisher</span><span class=\"params\">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(<span class=\"keyword\">long</span> id, String message)</span> </span>&#123;</span><br><span class=\"line\">        applicationContext.publishEvent(<span class=\"keyword\">new</span> DemoEvent(<span class=\"keyword\">this</span>, id, message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-测试方法\"><a href=\"#4-测试方法\" class=\"headerlink\" title=\"4. 测试方法\"></a>4. 测试方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publisherTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    demoPublisher.publish(<span class=\"number\">1L</span>, <span class=\"string\">\"成功了！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-结果\"><a href=\"#5-结果\" class=\"headerlink\" title=\"5.结果\"></a>5.结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;DemoListener2&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">收到了：com.jiuxian.publisher.DemoPublisher@3a62c01e消息;时间：1551762322376</span><br><span class=\"line\">消息：1:成功了！</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;DemoListener&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">收到了：com.jiuxian.publisher.DemoPublisher@3a62c01e消息;时间：1551762322376</span><br><span class=\"line\">消息：1:成功了！</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-示例源码\"><a href=\"#6-示例源码\" class=\"headerlink\" title=\"6. 示例源码\"></a>6. 示例源码</h4><p><a href=\"https://github.com/Zejun-Liu/SpringBoot2.0/tree/master/springboot-event\" target=\"_blank\" rel=\"noopener\">GitHub  https://github.com/Zejun-Liu/SpringBoot2.0/tree/master/springboot-event</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(11) SpringBoot @EnableAutoConfiguration","date":"2019-05-20T02:25:37.000Z","path":"2019/05/20/SpringBoot/11-SpringBoot-@EnableAutoConfiguration/","content":"<p>Spring Boot 启动类上一个 @SpringBootApplication 注解是</p>\n<ul>\n<li>@SpringBootConfiguration</li>\n<li>@EnableAutoConfiguration</li>\n<li>@ComponentScan</li>\n</ul>\n<p>三个注解组成的一个复合注解。其中 @SpringBootConfiguration 其实也是和@Configuration 注解组成的一个组合注解，功能也是和 @Configuration 相同；@ComponentScan 这个注解是标注需要扫描的包。今天着重说一下 @EnableAutoConfiguration 注解。</p>\n<a id=\"more\"></a>\n<hr>\n<p>   其实 @EnableAutoConfiguration 注解也和其它 @Enable*<br>注解一脉相乘的，简单说一下就是借助 @Import 的支持，收集和注册特定场景相关的Bean的定义：比如：@EnableAspectJAutoProxy 就是通过@Import 注解动态的将Bean注册到 SpringIoc<br>容器中，而@EnableAutoConfiguration 是借助 @Import 把所有符合条件的 Bean 加载到<br>SpringIoc 容器中。</p>\n<blockquote>\n<p>参看上一篇文章 <a href=\"https://my.oschina.net/u/3555293/blog/3015439\" target=\"_blank\" rel=\"noopener\">Spring Boot<br>自动配置之@Enable*与@Import注解</a></p>\n</blockquote>\n<h4 id=\"1、-EnableAutoConfiguration-也是一个组合注解\"><a href=\"#1、-EnableAutoConfiguration-也是一个组合注解\" class=\"headerlink\" title=\"1、@EnableAutoConfiguration 也是一个组合注解\"></a>1、@EnableAutoConfiguration 也是一个组合注解</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString ENABLED_OVERRIDE_PROPERTY = <span class=\"string\">\"spring.boot.enableautoconfiguration\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tClass&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中最重要的是 @Import(AutoConfigurationImportSelector.class)注解。借助AutoConfigurationImportSelector ，@EnableAutoConfiguration 帮助Spring Boot 应用将所有符合条件的 @Configuration 配置加载到当前IoC容器中。而最主要的还是借助于 Spring 框架一的一个工具类：SpringFactoriesLoader 将 META-INF/spring.factories加载配置，spring.factories 文件是一个典型的properties配置文件，配置的格式仍然是Key = Value 的形式，中不过 Key 和 Value 都是Java的完整类名。比如：org.springframework.data.repository.core.support.RepositoryFactorySupport=org.springframework.data.jpa.repository.support.JpaRepositoryFactory</p>\n<h4 id=\"2、AutoConfigurationImportSelector-源码\"><a href=\"#2、AutoConfigurationImportSelector-源码\" class=\"headerlink\" title=\"2、AutoConfigurationImportSelector 源码\"></a>2、AutoConfigurationImportSelector 源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> NO_IMPORTS;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tAutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class=\"line\">\t\t\t\t.loadMetadata(<span class=\"keyword\">this</span>.beanClassLoader); <span class=\"comment\">//1</span></span><br><span class=\"line\">\t\tAutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(</span><br><span class=\"line\">\t\t\t\tautoConfigurationMetadata, annotationMetadata); <span class=\"comment\">//2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.获取注解信息</li>\n<li>2.获取所有配置列表</li>\n</ul>\n<p>其中  AutoConfigurationMetadataLoader.loadMetadata方法源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AutoConfigurationMetadata <span class=\"title\">loadMetadata</span><span class=\"params\">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> loadMetadata(classLoader, PATH);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> AutoConfigurationMetadata <span class=\"title\">loadMetadata</span><span class=\"params\">(ClassLoader classLoader, String path)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tEnumeration&lt;URL&gt; urls = (classLoader != <span class=\"keyword\">null</span>) ? classLoader.getResources(path)</span><br><span class=\"line\">\t\t\t\t\t: ClassLoader.getSystemResources(path);</span><br><span class=\"line\">\t\t\tProperties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (urls.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tproperties.putAll(PropertiesLoaderUtils</span><br><span class=\"line\">\t\t\t\t\t\t.loadProperties(<span class=\"keyword\">new</span> UrlResource(urls.nextElement())));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> loadMetadata(properties);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Unable to load @ConditionalOnClass location [\"</span> + path + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>getAutoConfigurationEntry 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title\">getAutoConfigurationEntry</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tAutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tAnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.</span></span><br><span class=\"line\">\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.</span></span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class=\"line\">\t\t\t\tattributes);</span><br><span class=\"line\">\t    <span class=\"comment\">//3.</span></span><br><span class=\"line\">\t\tconfigurations = removeDuplicates(configurations);</span><br><span class=\"line\">\t\t<span class=\"comment\">//4.</span></span><br><span class=\"line\">\t\tSet&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tcheckExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">\t\tconfigurations.removeAll(exclusions);</span><br><span class=\"line\">\t\tconfigurations = filter(configurations, autoConfigurationMetadata);</span><br><span class=\"line\">\t\t<span class=\"comment\">//5.</span></span><br><span class=\"line\">\t\tfireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.获取注解上所有属性信息</li>\n<li><p>2.获取候选配置列表  [核心步骤]</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tAnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class=\"line\">\t\t\tgetSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class=\"line\">\tAssert.notEmpty(configurations,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"No auto configuration classes found in META-INF/spring.factories. If you \"</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">\"are using a custom packaging, make sure that file is correct.\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  通过SpringFactoriesLoader.loadFactoryNames获取配置信息</p>\n</li>\n<li>3.去重</li>\n<li>4.配置exclude 信息去除不需要的</li>\n<li>5.派发事件</li>\n</ul>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(10) SpringBoot @Enable* 与@ Import注解","date":"2019-05-20T02:23:59.000Z","path":"2019/05/20/SpringBoot/10-SpringBoot-@Enable 与@Import 注解/","content":"<p>SpringBoot 的自动配置如此强大，比如我们经常使用的@Enable* 注解来开启对某方面的支持。那么@Enable* 注解的原理是什么呢？</p>\n<h3 id=\"一、-Enable-注解与-Import-注解之间的关系\"><a href=\"#一、-Enable-注解与-Import-注解之间的关系\" class=\"headerlink\" title=\"一、@Enable* 注解与 @Import 注解之间的关系\"></a>一、@Enable* 注解与 @Import 注解之间的关系</h3><a id=\"more\"></a>\n<p>@Enable* 举例：</p>\n<ul>\n<li>@EnableScheduling 开启计划任务的支持</li>\n<li>@EnableAsync 开启异步方法的支持</li>\n<li>@EnableAspectJAutoProxy 开启对 AspectJ 代理的支持</li>\n<li>@EnableTransactionManagement 开启对事务的支持</li>\n<li>@EnableCaching 开启对注解式缓存的支持</li>\n</ul>\n<p>……</p>\n<p>我们观察这些@Enable* 的源码可以看出，所有@Enable* 注解都是有@Import的组合注解，@Enable* 自动开启的实现其实就是导入了一些自动配置的Bean</p>\n<p>看下 Spring Boot Reference Guide原文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You need not put all your @Configuration into a single class. The @Import annotation</span><br><span class=\"line\">can be used to import additional configuration classes.</span><br><span class=\"line\"></span><br><span class=\"line\">您不需要把所有的 @Configuration 放到一个类中。@Import 注解可以导入额外的配置类。</span><br></pre></td></tr></table></figure>\n<p>@Import 注解的最主要功能就是导入额外的配置信息</p>\n<h3 id=\"二、-Import-注解的用法\"><a href=\"#二、-Import-注解的用法\" class=\"headerlink\" title=\"二、 @Import 注解的用法\"></a>二、 @Import 注解的用法</h3><p>官方介绍：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &lt;p&gt;Provides functionality equivalent to the &#123;@code &lt;import/&gt;&#125; element in Spring XML.</span><br><span class=\"line\"> * Allows for importing &#123;@code @Configuration&#125; classes, &#123;@link ImportSelector&#125; and</span><br><span class=\"line\"> * &#123;@link ImportBeanDefinitionRegistrar&#125; implementations, as well as regular component</span><br><span class=\"line\"> * classes (as of 4.2; analogous to &#123;@link AnnotationConfigApplicationContext#register&#125;).</span><br></pre></td></tr></table></figure></p>\n<p>有以下三种使用方式</p>\n<h4 id=\"1、直接导入配置类（-Configuration-类）\"><a href=\"#1、直接导入配置类（-Configuration-类）\" class=\"headerlink\" title=\"1、直接导入配置类（@Configuration 类）\"></a>1、直接导入配置类（@Configuration 类）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(SchedulingConfiguration.class)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableScheduling &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到EnableScheduling注解直接导入配置类SchedulingConfiguration，这个类注解了@Configuration，且注册了一个scheduledAnnotationProcessor的Bean，SchedulingConfiguration的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulingConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span><br><span class=\"line\">\t<span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ScheduledAnnotationBeanPostProcessor <span class=\"title\">scheduledAnnotationProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledAnnotationBeanPostProcessor();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2、依据条件选择配置类（实现-ImportSelector-接口）\"><a href=\"#2、依据条件选择配置类（实现-ImportSelector-接口）\" class=\"headerlink\" title=\"2、依据条件选择配置类（实现 ImportSelector 接口）\"></a>2、依据条件选择配置类（实现 ImportSelector 接口）</h4><p>如果并不确定引入哪个配置类，需要根据@Import注解所标识的类或者另一个注解(通常是注解)里的定义信息选择配置类的话，用这种方式。</p>\n<p>ImportSelector接口只有一个方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br></pre></td></tr></table></figure></p>\n<p>AnnotationMetadata：用来获得当前配置类上的注解</p>\n<p>例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AsyncConfigurationSelector.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAsync &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tClass&lt;? extends Annotation&gt; annotation() <span class=\"keyword\">default</span> Annotation.class;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">AdviceMode <span class=\"title\">mode</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> AdviceMode.PROXY</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">order</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AsyncConfigurationSelector继承AdviceModeImportSelector，AdviceModeImportSelector类实现ImportSelector接口<br>根据AdviceMode的不同来选择生明不同的Bean<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableAsync</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME =</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"org.springframework.scheduling.aspectj.AspectJAsyncConfiguration\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (adviceMode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;ProxyAsyncConfiguration.class.getName()&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3、动态注册Bean（实现-ImportBeanDefinitionRegistrar-接口）\"><a href=\"#3、动态注册Bean（实现-ImportBeanDefinitionRegistrar-接口）\" class=\"headerlink\" title=\"3、动态注册Bean（实现 ImportBeanDefinitionRegistrar 接口）\"></a>3、动态注册Bean（实现 ImportBeanDefinitionRegistrar 接口）</h4><p>一般只要用户确切知道哪些Bean需要放入容器的话，自己可以通过spring 提供的注解来标识就可以了，比如@Component,@Service,@Repository,@Bean等。<br>如果是不确定的类，或者不是spring专用的，所以并不想用spring的注解进行侵入式标识，那么就可以通过@Import注解，实现ImportBeanDefinitionRegistrar接口来动态注册Bean。<br>比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AspectJAutoProxyRegistrar.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">exposeProxy</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar接口，ImportBeanDefinitionRegistrar的作用是在运行时自动添加Bean到已有的配置类，通过重写方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tAnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>AnnotationMetadata  参数用来获得当前配置类上的注解</li>\n<li>BeanDefinitionRegistry 参数用来注册Bean</li>\n</ul>\n<p>源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tAnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class=\"line\"></span><br><span class=\"line\">\tAnnotationAttributes enableAspectJAutoProxy =</span><br><span class=\"line\">\t\t\tAnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy.getBoolean(<span class=\"string\">\"proxyTargetClass\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy.getBoolean(<span class=\"string\">\"exposeProxy\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tAopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Mybatis 中大名鼎鼎的@MapperScan 也是如此</p>\n<h3 id=\"三、官方文档\"><a href=\"#三、官方文档\" class=\"headerlink\" title=\"三、官方文档\"></a>三、官方文档</h3><p><a href=\"https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#using-boot-configuration-classes\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(09) SpringBoot 之条件注解","date":"2019-05-20T02:22:55.000Z","path":"2019/05/20/SpringBoot/09-SpringBoot-之条件注解/","content":"<p>Spring Boot 神奇的自动配置，主要依靠大量的条件注解来使用配置自动化。</p>\n<p>根据满足某一个特定条件创建一个特定的Bean。比如说，在某些系统变量下创建Bean，或者只有在某个Bean创建后才去创建另外一个Bean. 就是根据条件来控制Bean的创建行为，可以利用该特性来进行一些自动配置。</p>\n<h3 id=\"一、常用的条件注解\"><a href=\"#一、常用的条件注解\" class=\"headerlink\" title=\"一、常用的条件注解\"></a>一、常用的条件注解</h3><ul>\n<li>@Conditional 依赖的条件</li>\n<li>@ConditionalOnBean  在某个Bean存在的条件下</li>\n<li>@ConditionalOnMissingBean 在某个Bean不存在的条件下</li>\n<li>@ConditionalOnClass  在某个Class存在的条件下</li>\n<li>@ConditionalOnMissingClass  在某个Class不存在的条件下<a id=\"more\"></a>\n比较常见的是这些注解，还有其它的比如<br>@ConditionalOnWebApplication,<br>@ConditionalOnProperty 等，可举一反三</li>\n</ul>\n<h3 id=\"二、特别说明-Conditional-注解\"><a href=\"#二、特别说明-Conditional-注解\" class=\"headerlink\" title=\"二、特别说明 @Conditional 注解\"></a>二、特别说明 @Conditional 注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Conditional &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * All &#123;<span class=\"doctag\">@link</span> Condition Conditions&#125; that must &#123;<span class=\"doctag\">@linkplain</span> Condition#matches match&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * in order for the component to be registered.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;? extends Condition&gt;[] value();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用@Conditional注解，对象需要实现Condition接口，Condition 接口是一个函数式接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、条件注解示例\"><a href=\"#三、条件注解示例\" class=\"headerlink\" title=\"三、条件注解示例\"></a>三、条件注解示例</h3><p>示例场景：项目中动态的配置Mysql或者Oracle数据源</p>\n<h4 id=\"1-定义配置文件\"><a href=\"#1-定义配置文件\" class=\"headerlink\" title=\"1. 定义配置文件\"></a>1. 定义配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db-type=oracle</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-定义Condition类\"><a href=\"#2-定义Condition类\" class=\"headerlink\" title=\"2. 定义Condition类\"></a>2. 定义Condition类</h4><p>MySqlCondition.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"mysql\"</span>.equals(context.getEnvironment().getProperty(<span class=\"string\">\"db-type\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OracleCondition.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OracleCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"oracle\"</span>.equals(context.getEnvironment().getProperty(<span class=\"string\">\"db-type\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>获取配置文件db-type的值</p>\n</blockquote>\n<h4 id=\"3-JdbcFactory接口\"><a href=\"#3-JdbcFactory接口\" class=\"headerlink\" title=\"3. JdbcFactory接口\"></a>3. JdbcFactory接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">JdbcFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-默认的Mysql和Oracle实现\"><a href=\"#4-默认的Mysql和Oracle实现\" class=\"headerlink\" title=\"4. 默认的Mysql和Oracle实现\"></a>4. 默认的Mysql和Oracle实现</h4><p>Mysql<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(value = JdbcFactory.class, ignored = MySqlDefaultFactory.class)</span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(MySqlCondition.class)</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlDefaultFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">JdbcFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Default MySql create ..\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Oracle</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(value = JdbcFactory.class, ignored = OracleDefaultFactory.class)</span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(OracleCondition.class)</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OracleDefaultFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">JdbcFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Default oracle create..\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-测试默认实现方式\"><a href=\"#5-测试默认实现方式\" class=\"headerlink\" title=\"5. 测试默认实现方式\"></a>5. 测试默认实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JdbcFactory jdbcFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">conditionOnMissBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    jdbcFactory.create();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default MySql create ..</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-自定义实现方式\"><a href=\"#6-自定义实现方式\" class=\"headerlink\" title=\"6. 自定义实现方式\"></a>6. 自定义实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MysqlFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">JdbcFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"mysql 。。 create\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-测试\"><a href=\"#7-测试\" class=\"headerlink\" title=\"7. 测试\"></a>7. 测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JdbcFactory jdbcFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">conditionOnMissBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    jdbcFactory.create();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql 。。 create</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-解析\"><a href=\"#8-解析\" class=\"headerlink\" title=\"8.解析\"></a>8.解析</h4><blockquote>\n<p>当环境中不存在 JdbcFactory 的Bean时则使用默认的实现的方式，如例：没有自定义实现时，则默认使用MySqlDefaultFactory。这在自动化配置中会经常用到。比如redisTemplate 的默认实现</p>\n</blockquote>\n<h3 id=\"四、GitHub源码\"><a href=\"#四、GitHub源码\" class=\"headerlink\" title=\"四、GitHub源码\"></a>四、GitHub源码</h3><p><a href=\"https://github.com/Zejun-Liu/SpringBoot2.0/tree/master/springboot-annotations\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(08) SpringBoot 之组合注解","date":"2019-05-20T02:22:25.000Z","path":"2019/05/20/SpringBoot/08-SpringBoot-之组合注解/","content":"<p>SpringBoot应用开发，会大量的使用注解，有些注解会经常一起使用，如果能通过一个组合注解进行包装则能够简化代码，并且还会避免因为少了某些注解而报错</p>\n<h3 id=\"一、-常见的组合注解\"><a href=\"#一、-常见的组合注解\" class=\"headerlink\" title=\"一、 常见的组合注解\"></a>一、 常见的组合注解</h3><h4 id=\"1-SpringBootApplication\"><a href=\"#1-SpringBootApplication\" class=\"headerlink\" title=\"1. @SpringBootApplication\"></a>1. @SpringBootApplication</h4><p>该注解是SpringBoot项目的核心注解，该注解包含：</p>\n<ul>\n<li>@SpringBootConfiguration</li>\n<li>@EnableAutoConfiguration</li>\n<li>@ComponentScan<a id=\"more\"></a>\n@SpringBootApplication 注解就有了自动配置功能 、扫描包功能。</li>\n</ul>\n<p>@EnableAutoConfiguration 让SpringBoot根据类路径中的jar包依赖为当前项目进行自动配置。例如，添加spring-boot-starter-web依赖，会自动添加tomcat和SpringMVC的依赖，SpringBoot 会对Tomcat和SpringMVC进行自动配置</p>\n<p>@ComponentScan 会自动扫描@SpringBootApplication所在类的同级包以及子包的Bean。所以建议入口类放在groupId+artifactId组合下，或者groupId下。</p>\n<p>在SpringBoot项目启动类上用这三个注解替换@SpringBootApplication也是可以的</p>\n<h4 id=\"2-Configuration\"><a href=\"#2-Configuration\" class=\"headerlink\" title=\"2. @Configuration\"></a>2. @Configuration</h4><p>该注解包含@Component注解，该注解不单标注该类是一个配置类，而且声明该类是一个Bean</p>\n<h4 id=\"3-Enable\"><a href=\"#3-Enable\" class=\"headerlink\" title=\"3. @Enable*\"></a>3. @Enable*</h4><p>@Enable* 类的注解都有一个@Import注解，该注解是用来导入配置类的，其实就是导入了一些自动配置的Bean，有以下三类：</p>\n<ol>\n<li><p>直接导入配置类</p>\n<p> 导入一个有 @Configuration的Bean</p>\n</li>\n<li><p>依据条件选择配置类</p>\n<p> 导入一个实现了ImportSelector接口的配置类</p>\n</li>\n<li><p>动态注册Bean</p>\n<p> 导入一个实现了ImportBeanDefinitionRegistrar接口的配置类</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>本文不做深入探讨，会另出一篇关于@Import的使用</strong></p>\n</blockquote>\n<h3 id=\"二、自定义组合注解\"><a href=\"#二、自定义组合注解\" class=\"headerlink\" title=\"二、自定义组合注解\"></a>二、自定义组合注解</h3><p>我们在配置类上加@ComponentScan时还会写@Configuration我们可以写一个组合注解</p>\n<ol>\n<li>组合注解<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ComponentScanConfig &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这个必须写，覆盖@ComponentScan的注解value的值</span></span><br><span class=\"line\">    String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>【注】String[] value() default {}; 是为了覆盖@ComponentScan的注解value的值</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CombinationAnnotationTestService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"doSth....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ComponentScanConfig</span>(<span class=\"string\">\"com.jiuxian.combination\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CombinationAnnotationConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CombinationAnnotationTestService <span class=\"title\">combinationTestService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CombinationAnnotationTestService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n<p>(1)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(CombinationAnnotationConfig.class);</span><br><span class=\"line\">        CombinationAnnotationTestService service = context.getBean(CombinationAnnotationTestService.class);</span><br><span class=\"line\">        service.doSth();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootAnnotationsApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CombinationAnnotationTestService combinationAnnotationTestService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">combinationTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        combinationAnnotationTestService.doSth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>结果<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSth....</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"三、GitHub源码\"><a href=\"#三、GitHub源码\" class=\"headerlink\" title=\"三、GitHub源码\"></a>三、GitHub源码</h3><p><a href=\"https://github.com/Zejun-Liu/SpringBoot2.0/tree/master/springboot-annotations\" target=\"_blank\" rel=\"noopener\">GitHub源码</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(07) SpringBoot 如何让yml,properties配置文件有提示","date":"2019-05-20T02:21:44.000Z","path":"2019/05/20/SpringBoot/07-SpringBoot-如何让yml-properties配置文件有提示/","content":"<p>我们在引用spring官方start库或者第三方start库时，在写配置文件时idea总是能精准的提示，并且鼠标可以点过去看具体属性或者类，而自己写的配置文件idea只会有“Cannot resolve configuration property …”这样的提示。</p>\n<p>我们现在也去配置我们自己的配置文件让idea知道这些配置文件是干什么的。</p>\n<h3 id=\"一、需要的注解\"><a href=\"#一、需要的注解\" class=\"headerlink\" title=\"一、需要的注解\"></a>一、需要的注解</h3><a id=\"more\"></a>\n<ul>\n<li>@ConfigurationProperties 配置属性文件，需要指定前缀 prefix</li>\n<li>@EnableConfigurationProperties 启用配置，需要指定启用的配置类</li>\n<li>@NestedConfigurationProperty 当一个类中引用了外部类，需要在该属性上加该注解</li>\n</ul>\n<h3 id=\"二、POM依赖\"><a href=\"#二、POM依赖\" class=\"headerlink\" title=\"二、POM依赖\"></a>二、POM依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、配置类\"><a href=\"#三、配置类\" class=\"headerlink\" title=\"三、配置类\"></a>三、配置类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer no;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"jiuxian\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiuxianProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nameCn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nameEn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] hobbies;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SexEnum sexEnum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> single;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> School school;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> City city;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> SexEnum &#123;</span><br><span class=\"line\">        MAN, WOMAN</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">City</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String no;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候@ConfigurationProperties(prefix = “jiuxian”) 注解会报错not registered via @EnableConfigurationProperties or marked as Spring component。这需要加上@EnableConfigurationProperties就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(&#123; JiuxianProperties.class &#125;)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootYmlApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootYmlApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、看效果\"><a href=\"#四、看效果\" class=\"headerlink\" title=\"四、看效果\"></a>四、看效果</h3><p>然后输入 mvn clean package </p>\n<p>这个时候properties和yml文件已经可以提示了，不过有一些会有问题，比如jiuxian.school，这是一个对象，idea并不能解析,而因为City对象是个内部类是可以解析的。</p>\n<p>如图: </p>\n<p><img src=\"https://github.com/Zejun-Liu/images/blob/master/yml/hint1.png?raw=true\" alt></p>\n<p><img src=\"https://github.com/Zejun-Liu/images/blob/master/yml/idea-warning1.png?raw=true\" alt></p>\n<p>如何处理呢？<br>只需要加上 @NestedConfigurationProperty注解即可<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NestedConfigurationProperty</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> School school;</span><br></pre></td></tr></table></figure></p>\n<p>然后输入命令 mvn clean package</p>\n<p>警告消失(会有一点延迟)</p>\n<h3 id=\"五、为什么\"><a href=\"#五、为什么\" class=\"headerlink\" title=\"五、为什么\"></a>五、为什么</h3><p>为什么一定要打包编译后才可以呢？</p>\n<p>看一下打包过后的结构，如图：</p>\n<p><img src=\"https://github.com/Zejun-Liu/images/blob/master/yml/classs1.png?raw=true\" alt></p>\n<p>idea之所以会代码提示就是因为这个spring-configuration-metadata.json json文件。这个文件的生成依据的就是我们上面的配置。</p>\n<h3 id=\"六、进阶配置\"><a href=\"#六、进阶配置\" class=\"headerlink\" title=\"六、进阶配置\"></a>六、进阶配置</h3><p>如果想在配置文件中能够提示该字段描述，以及该字段可选参数，是否弃用等信息时，需要加额外的配置</p>\n<h4 id=\"1-在resources目录下新建META-INF文件夹，加一个additional-spring-configuration-metadata-json-配置文件\"><a href=\"#1-在resources目录下新建META-INF文件夹，加一个additional-spring-configuration-metadata-json-配置文件\" class=\"headerlink\" title=\"1. 在resources目录下新建META-INF文件夹，加一个additional-spring-configuration-metadata.json 配置文件\"></a>1. 在resources目录下新建META-INF文件夹，加一个additional-spring-configuration-metadata.json 配置文件</h4><p>（1）该配置文件的节点信息</p>\n<ul>\n<li>groups 有以下属性：<ul>\n<li>name  group的全名，该属性必须</li>\n<li>type  group数据类型的类名。例如，如果group是基于一个被@ConfigurationProperties注解的类，该属性将包含该类的全限定名。如果基于一个@Bean方法，它将是该方法的返回类型。如果该类型未知，则该属性将被忽略</li>\n<li>description  一个简短的group描述，用于展示给用户，要.点结尾。如果没有可用描述，该属性将被忽略</li>\n<li>sourceType  来源类名。例如，如果组基于一个被@ConfigurationProperties注解的@Bean方法，该属性将包含@Configuration类的全限定名，该类包含此方法。如果来源类型未知，则该属性将被忽略</li>\n<li>sourceMethod  该组的方法的全名（包含括号及参数类型）。例如，被@ConfigurationProperties注解的@Bean方法名。如果源方法未知，该属性将被忽略</li>\n</ul>\n</li>\n</ul>\n<p>“groups”是高级别的节点，它们本身不指定一个值，但为properties提供一个有上下文关联的分组。例如，server.port和server.servlet-path属性是server组的一部分。</p>\n<blockquote>\n<p>注：不需要每个”property”都有一个”group”，一些属性可以以自己的形式存在。</p>\n</blockquote>\n<ul>\n<li><p>properties</p>\n<ul>\n<li>name 属性全名,格式为小写虚线分割的形式（jiuxian.name-en).必须要有的</li>\n<li>type 属性数据类型,java.lang.Boolean。类型未知可忽略</li>\n<li>description 该属性的描述</li>\n<li>sourceType 来源类型,例如，如果property来自一个被@ConfigurationProperties注解的类，该属性将包括该类的全限定名。如果来源类型未知则该属性会被忽略</li>\n<li>defaultValue 定义输入时的默认值,只是提示，并不是真正的默认值，可忽略</li>\n<li>deprecated 是否废弃 boolean 值 <ul>\n<li>level 级别  error,warning</li>\n<li>reason 废弃原因</li>\n<li>replacement 替代属性，为properties 全名</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>hints 可以给属性提供可选的值，以级描述</p>\n<ul>\n<li>name 属性全名，不能为空</li>\n<li>values 可选的值</li>\n</ul>\n</li>\n</ul>\n<p>详细看示例<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"groups\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"name\": \"jiuxian\",</span><br><span class=\"line\">      \"sourceType\": \"com.jiuxian.config.JiuxianProperties\",</span><br><span class=\"line\">      \"type\": \"com.jiuxian.config.JiuxianProperties\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"name\": \"jiuxian.school\",</span><br><span class=\"line\">      \"sourceType\": \"com.jiuxian.config.School\",</span><br><span class=\"line\">      \"type\": \"com.jiuxian.config.School\",</span><br><span class=\"line\">      \"sourceMethod\": \"getSchool()\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  \"properties\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"name\": \"jiuxian.name\",</span><br><span class=\"line\">      \"sourceType\": \"com.jiuxian.config.JiuxianProperties\",</span><br><span class=\"line\">      \"type\": \"java.lang.String\",</span><br><span class=\"line\">      \"deprecation\": &#123;</span><br><span class=\"line\">        \"level\": \"error\",</span><br><span class=\"line\">        \"reason\": \"replacement nameCn.\",</span><br><span class=\"line\">        \"replacement\": \"jiuxian.name-cn\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"name\": \"jiuxian.name-cn\",</span><br><span class=\"line\">      \"sourceType\": \"com.jiuxian.config.JiuxianProperties\",</span><br><span class=\"line\">      \"type\": \"java.lang.String\",</span><br><span class=\"line\">      \"defaultValue\": \"jiuxian\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  \"hints\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"name\": \"jiuxian.sex-enum\",</span><br><span class=\"line\">      \"values\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"value\": \"man\",</span><br><span class=\"line\">          \"description\": \"man.\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"value\": \"woman\",</span><br><span class=\"line\">          \"description\": \"woman.\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"name\": \"jiuxian.single\",</span><br><span class=\"line\">      \"values\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"value\": true,</span><br><span class=\"line\">          \"description\": \"yes.\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"value\": false,</span><br><span class=\"line\">          \"description\": \"no.\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>idea 提示：<br><img src=\"https://github.com/Zejun-Liu/images/blob/master/yml/deprecated1.png?raw=true\" alt></p>\n<p>(2) 如何废弃某个字段，可以用代码来注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getNameCn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@DeprecatedConfigurationProperty</span>(replacement = <span class=\"string\">\"jiuxian.name-cn\"</span>, reason = <span class=\"string\">\"replacement nameCn\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    setNameCn(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"七、更多详细介绍请参阅官网\"><a href=\"#七、更多详细介绍请参阅官网\" class=\"headerlink\" title=\"七、更多详细介绍请参阅官网\"></a>七、更多详细介绍请参阅官网</h3><p> <a href=\"https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/html/configuration-metadata.html\" target=\"_blank\" rel=\"noopener\">Spring官网介绍</a></p>\n<h3 id=\"八、本文示例代码\"><a href=\"#八、本文示例代码\" class=\"headerlink\" title=\"八、本文示例代码\"></a>八、本文示例代码</h3><p><a href=\"https://github.com/Zejun-Liu/SpringBoot/blob/master/springboot-yml/README.md\" target=\"_blank\" rel=\"noopener\">GitHub 源码</a></p>\n<blockquote>\n<p>【注】以上代码基于Springboot 2.0</p>\n</blockquote>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(06) SpringBoot Aop的使用","date":"2019-05-20T02:20:53.000Z","path":"2019/05/20/SpringBoot/06-SpringBoot-Aop的使用/","content":"<p>AOP：面向切面编程，相对于OOP面向对角编程<br>Spring的AOP的存在目的是为了解耦。AOP可以让一组类共享相同的行为。在OOP中只能继承和实现接口，且类继承只能单继承，阻碍更多行为添加到一组类上，AOP弥补了OOP的不足。</p>\n<p>还有就是为了清晰的逻辑，让业务逻辑关注业务本身，不用去关心其它的事情，比如事务。</p>\n<p>Spring的AOP是通过JDK的动态代理和CGLIB实现的。</p>\n<h3 id=\"一、AOP的术语：\"><a href=\"#一、AOP的术语：\" class=\"headerlink\" title=\"一、AOP的术语：\"></a>一、AOP的术语：</h3><a id=\"more\"></a>\n<p>aop 有一堆术语，非常难以理解，简单说一下</p>\n<ul>\n<li><p>通知(有的地方叫增强)(Advice) </p>\n<p>需要完成的工作叫做通知，就是你写的业务逻辑中需要比如事务、日志等先定义好，然后需要的地方再去用</p>\n</li>\n<li><p>连接点(Join point) </p>\n<p>就是spring中允许使用通知的地方，基本上每个方法前后抛异常时都可以是连接点</p>\n</li>\n<li><p>切点(Poincut) </p>\n<p>其实就是筛选出的连接点，一个类中的所有方法都是连接点，但又不全需要，会筛选出某些作为连接点做为切点。如果说通知定义了切面的动作或者执行时机的话，切点则定义了执行的地点</p>\n</li>\n<li><p>切面(Aspect) </p>\n<p>其实就是通知和切点的结合，通知和切点共同定义了切面的全部内容，它是干什么的，什么时候在哪执行</p>\n</li>\n<li><p>引入(Introduction) </p>\n<p>在不改变一个现有类代码的情况下，为该类添加属性和方法,可以在无需修改现有类的前提下，让它们具有新的行为和状态。其实就是把切面（也就是新方法属性：通知定义的）用到目标类中去</p>\n</li>\n<li><p>目标(target) </p>\n<p>被通知的对象。也就是需要加入额外代码的对象，也就是真正的业务逻辑被组织织入切面。</p>\n</li>\n<li><p>织入(Weaving) </p>\n<p>把切面加入程序代码的过程。切面在指定的连接点被织入到目标对象中，在目标对象的生命周期里有多个点可以进行织入：</p>\n<ul>\n<li>编译期：切面在目标类编译时被织入，这种方式需要特殊的编译器</li>\n<li>类加载期：切面在目标类加载到JVM时被织入，这种方式需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码</li>\n<li>运行期：切面在应用运行的某个时刻被织入，一般情况下，在织入切面时，AOP容器会为目标对象动态创建一个代理对象，Spring AOP就是以这种方式织入切面的。</li>\n</ul>\n</li>\n</ul>\n<p><strong>例：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">List <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在UserService中的save()方法前需要开启事务，在方法后关闭事务，在抛异常时回滚事务。</p>\n<p>那么,UserService中的所有方法都是连接点(JoinPoint),save()方法就是切点(Poincut)。需要在save()方法前后执行的方法就是通知(Advice)，切点和通知合起来就是一个切面(Aspect)。save()方法就是目标(target)。把想要执行的代码动态的加入到save()方法前后就是织入(Weaving)。</p>\n<p>有的地方把通知称作增强是有道理的，在业务方法前后加上其它方法，其实就是对该方法的增强。</p>\n<h3 id=\"二、常用AOP通知-增强-类型\"><a href=\"#二、常用AOP通知-增强-类型\" class=\"headerlink\" title=\"二、常用AOP通知(增强)类型\"></a>二、常用AOP通知(增强)类型</h3><ul>\n<li>before(前置通知)：  在方法开始执行前执行</li>\n<li>after(后置通知)：  在方法执行后执行</li>\n<li>afterReturning(返回后通知)：   在方法返回后执行</li>\n<li>afterThrowing(异常通知)： 在抛出异常时执行</li>\n<li>around(环绕通知)：  在方法执行前和执行后都会执行</li>\n</ul>\n<h3 id=\"三、执行顺序\"><a href=\"#三、执行顺序\" class=\"headerlink\" title=\"三、执行顺序\"></a>三、执行顺序</h3><blockquote>\n<p>around &gt; before &gt; around &gt; after &gt; afterReturning</p>\n</blockquote>\n<h3 id=\"四、先说一下SpringAop非常霸道又用的非常少的功能-–引入-Introduction\"><a href=\"#四、先说一下SpringAop非常霸道又用的非常少的功能-–引入-Introduction\" class=\"headerlink\" title=\"四、先说一下SpringAop非常霸道又用的非常少的功能 –引入(Introduction)\"></a>四、先说一下SpringAop非常霸道又用的非常少的功能 –引入(Introduction)</h3><ol>\n<li><p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntroductionAop</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeclareParents</span>(value = <span class=\"string\">\"com.jiuxian..service..*\"</span>, defaultImpl = DoSthServiceImpl.class)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DoSthService doSthService;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>service代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoSthService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoSthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DoSthService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do sth ....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testIntroduction</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIntroduction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do testIntroduction\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIntroduction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    userService.testIntroduction();</span><br><span class=\"line\">    <span class=\"comment\">//Aop 让UserService方法拥有 DoSthService的方法</span></span><br><span class=\"line\">    DoSthService doSthService = (DoSthService) userService;</span><br><span class=\"line\">    doSthService.doSth();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do testIntroduction</span><br><span class=\"line\">do sth ....</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"五、五种通知（增强）代码实现\"><a href=\"#五、五种通知（增强）代码实现\" class=\"headerlink\" title=\"五、五种通知（增强）代码实现\"></a>五、五种通知（增强）代码实现</h3><ol>\n<li>配置类</li>\n</ol>\n<p>(1) 对方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionAop</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.jiuxian..service.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beginTransaction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before beginTransaction\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after commit\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"pointcut()\"</span>, returning = <span class=\"string\">\"returnObject\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturning</span><span class=\"params\">(JoinPoint joinPoint, Object returnObject)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"afterReturning\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing</span>(<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrowing</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"afterThrowing afterThrowing  rollback\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">around</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"around\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> joinPoint.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"around\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2) 对注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnnotationAop</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(value = <span class=\"string\">\"@annotation(log)\"</span>, argNames = <span class=\"string\">\"log\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointcut</span><span class=\"params\">(Log log)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(value = <span class=\"string\">\"pointcut(log)\"</span>, argNames = <span class=\"string\">\"joinPoint,log\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">around</span><span class=\"params\">(ProceedingJoinPoint joinPoint, Log log)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(log.value());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"around\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> joinPoint.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> throwable;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"around\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"@annotation(com.jiuxian.annotation.Log)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\">        Log log = method.getAnnotation(Log.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"注解式拦截 \"</span> + log.value());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>service 方法实现</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">save</span><span class=\"params\">(String user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testAnnotationAop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save</span><span class=\"params\">(String user)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"保存用户信息\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"a\"</span>.equals(user)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Log</span>(value = <span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAnnotationAop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"testAnnotationAop\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootAopApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAop1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        userService.save(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        Assert.assertTrue(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAop2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        userService.save(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAop3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        userService.testAnnotationAop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结果</p>\n</li>\n</ol>\n<ul>\n<li><p>执行testAop1时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">around</span><br><span class=\"line\">before beginTransaction</span><br><span class=\"line\">保存用户信息</span><br><span class=\"line\">around</span><br><span class=\"line\">after commit</span><br><span class=\"line\">afterReturning :: 张三</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行testAop2时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">around</span><br><span class=\"line\">before beginTransaction</span><br><span class=\"line\">保存用户信息</span><br><span class=\"line\">around</span><br><span class=\"line\">after commit</span><br><span class=\"line\">afterThrowing  rollback</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行testAop3时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br><span class=\"line\">around</span><br><span class=\"line\">testAnnotationAop</span><br><span class=\"line\">around</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"5\">\n<li>pom文件<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"六、最常用的execution解释\"><a href=\"#六、最常用的execution解释\" class=\"headerlink\" title=\"六、最常用的execution解释\"></a>六、最常用的execution解释</h3><blockquote>\n<p>例: execution(* com.jiuxian..service.*.*(..))</p>\n</blockquote>\n<ul>\n<li>execution 表达式的主体</li>\n<li>第一个* 代表任意的返回值</li>\n<li>com.jiuxian aop所横切的包名</li>\n<li>包后面.. 表示当前包及其子包</li>\n<li>第二个* 表示类名，代表所有类</li>\n<li>.*(..) 表示任何方法,括号代表参数 .. 表示任意参数 </li>\n</ul>\n<blockquote>\n<p>例: execution(* com.jiuxian..service.*Service.add*(String))</p>\n</blockquote>\n<p>表示： com.jiuxian 包及其子包下的service包下，类名以Service结尾，方法以add开头，参数类型为String的方法的切点。</p>\n<h3 id=\"七、特别的用法\"><a href=\"#七、特别的用法\" class=\"headerlink\" title=\"七、特别的用法\"></a>七、特别的用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Pointcut(&quot;execution(public * *(..))&quot;)</span><br><span class=\"line\">private void anyPublicOperation() &#123;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">@Pointcut(&quot;within(com.xyz.someapp.trading..*)&quot;)</span><br><span class=\"line\">private void inTrading() &#123;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">@Pointcut(&quot;anyPublicOperation() &amp;&amp; inTrading()&quot;)</span><br><span class=\"line\">private void tradingOperation() &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>可以使用 &amp;&amp;, ||, ! 运算符来定义切点</p>\n<h3 id=\"八、更多详细介绍请参阅官网\"><a href=\"#八、更多详细介绍请参阅官网\" class=\"headerlink\" title=\"八、更多详细介绍请参阅官网\"></a>八、更多详细介绍请参阅官网</h3><p><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-pointcuts\" target=\"_blank\" rel=\"noopener\">SpringAOP官网介绍</a></p>\n<h3 id=\"九、本文示例代码\"><a href=\"#九、本文示例代码\" class=\"headerlink\" title=\"九、本文示例代码\"></a>九、本文示例代码</h3><p><a href=\"https://github.com/Zejun-Liu/SpringBoot/blob/master/springboot-aop/README.md\" target=\"_blank\" rel=\"noopener\">GitHub 源码</a></p>\n<blockquote>\n<p>以上代码基于Springboot 2.0</p>\n</blockquote>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(05) SpringBoot 拦截器、过滤器、监听器","date":"2019-05-20T02:20:05.000Z","path":"2019/05/20/SpringBoot/05-SpringBoot-拦截器、过滤器、监听器/","content":"<p>&emsp;&emsp;在工作中使用Web框架，总是避免不了与这些概念打交道，做一下总结，一口气说完拦截器、过滤器、监听器。</p>\n<p><a href=\"https://github.com/Zejun-Liu/SpringBoot/blob/master/springboot-interceptor-filter-listener/README.md\" target=\"_blank\" rel=\"noopener\">GitHub源码地址</a></p>\n<h3 id=\"1-拦截器、过滤器、监听器区别\"><a href=\"#1-拦截器、过滤器、监听器区别\" class=\"headerlink\" title=\"1. 拦截器、过滤器、监听器区别\"></a>1. 拦截器、过滤器、监听器区别</h3><ul>\n<li>拦截器(interceptor)：依赖于web框架，基于Java的反射机制，属于AOP的一种应用。一个拦截器实例在一个controller生命周期内可以多次调用。只能拦截Controller的请求。</li>\n<li>过滤器(Filter)：依赖于Servlet容器，基于函数回掉，可以对几乎所有请求过滤，一个过滤器实例只能在容器初使化调用一次。</li>\n<li>监听器(Listener)：web监听器是Servlet中的特殊的类，用于监听web的特定事件，随web应用启动而启动，只初始化一次。<a id=\"more\"></a>\n<h3 id=\"2-有什么用\"><a href=\"#2-有什么用\" class=\"headerlink\" title=\"2. 有什么用\"></a>2. 有什么用</h3></li>\n<li>拦截器(interceptor)：在一个请求进行中的时候，你想干预它的进展，甚至控制是否终止。这是拦截器做的事。</li>\n<li>过滤器(Filter)：当有一堆东西，只希望选择符合的东西。定义这些要求的工具，就是过滤器。</li>\n<li>监听器(Listener)：一个事件发生后，只希望获取这些事个事件发生的细节，而不去干预这个事件的执行过程，这就用到监听器</li>\n</ul>\n<h3 id=\"3-启动顺序\"><a href=\"#3-启动顺序\" class=\"headerlink\" title=\"3. 启动顺序\"></a>3. 启动顺序</h3><pre><code>监听器 &gt;  过滤器 &gt; 拦截器\n</code></pre><h3 id=\"4-SpringBoot中的具体实现\"><a href=\"#4-SpringBoot中的具体实现\" class=\"headerlink\" title=\"4.SpringBoot中的具体实现\"></a>4.SpringBoot中的具体实现</h3><h4 id=\"（1）-拦截器\"><a href=\"#（1）-拦截器\" class=\"headerlink\" title=\"（1） 拦截器\"></a>（1） 拦截器</h4><ol>\n<li>拦截器常用有两种方式实现<ul>\n<li>实现HandlerInterceptor接口</li>\n<li>继承HandlerInterceptorAdapter 抽象类</li>\n</ul>\n</li>\n<li>区别和联系<ul>\n<li>HandlerInterceptorAdapter 实现AsyncHandlerInterceptor接口，AsyncHandlerInterceptor接口 继承HandlerInterceptor接口.</li>\n<li>AsyncHandlerInterceptor接口多了一个afterConcurrentHandlingStarted方法</li>\n</ul>\n</li>\n<li>具体方法<ul>\n<li>preHandle //请求过来之后首先走的方法 return true 继续往下执行</li>\n<li>postHandle //请求之后返回之前</li>\n<li>afterCompletion //处理完成之后</li>\n<li>afterConcurrentHandlingStarted  //如果返回一个current类型的变量，会启用一个新的线程。执行完preHandle方法之后立即会调用afterConcurrentHandlingStarted,然后新线程再以次执行preHandle,postHandle,afterCompletion</li>\n</ul>\n</li>\n<li>代码实现</li>\n</ol>\n<blockquote>\n<p><strong><em>【注】以下代码基于springboot2.0</em></strong></p>\n</blockquote>\n<p>(1)拦截器</p>\n<p>MyInterceptor1  继承 HandlerInterceptorAdapter</p>\n<p>MyInterceptor2  实现 HandlerInterceptor接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">\"startTime\"</span>, System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; MyInterceptor1 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.preHandle(request, response, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = (<span class=\"keyword\">long</span>) request.getAttribute(<span class=\"string\">\"startTime\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MyInterceptor1 执行:\"</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; MyInterceptor1 postHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        request.removeAttribute(<span class=\"string\">\"startTime\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; MyInterceptor1 afterCompletion &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterConcurrentHandlingStarted</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.afterConcurrentHandlingStarted(request, response, handler);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; MyInterceptor1 afterConcurrentHandlingStarted &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">\"startTime\"</span>, System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; MyInterceptor2 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = (<span class=\"keyword\">long</span>) request.getAttribute(<span class=\"string\">\"startTime\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MyInterceptor2 执行:\"</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; MyInterceptor2 postHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        request.removeAttribute(<span class=\"string\">\"startTime\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; MyInterceptor2 afterCompletion &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> (2)配置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> MyInterceptor1()).addPathPatterns(<span class=\"string\">\"/**\"</span>);</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> MyInterceptor2()).addPathPatterns(<span class=\"string\">\"/**\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(3)请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootInterceptorApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootInterceptorApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/hello1\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity&lt;String&gt; <span class=\"title\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.ok(<span class=\"string\">\"HelloWorld\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/hello2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StreamingResponseBody <span class=\"title\">hello2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (OutputStream outputStream) -&gt; &#123;</span><br><span class=\"line\">            outputStream.write(<span class=\"string\">\"success\"</span>.getBytes());</span><br><span class=\"line\">            outputStream.flush();</span><br><span class=\"line\">            outputStream.close();</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/hello3\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Future&lt;String&gt; <span class=\"title\">hello3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AsyncResult&lt;&gt;(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(4) 运行结果</p>\n<ol>\n<li><p>请求/hello1</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor2 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">MyInterceptor2 执行:516</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor2 postHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">MyInterceptor1 执行:516</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 postHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor2 afterCompletion &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 afterCompletion &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行按preHandle &gt; postHandle &gt; afterCompletion</p>\n</blockquote>\n</li>\n<li><p>请求/hello2  或 /hello3</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor2 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 afterConcurrentHandlingStarted &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor2 preHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">MyInterceptor2 执行:1</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor2 postHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">MyInterceptor1 执行:1</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 postHandle &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor2 afterCompletion &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; MyInterceptor1 afterCompletion &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>MyInterceptor1 执行顺序 preHandle &gt; afterConcurrentHandlingStarted   &gt; preHandle &gt; postHandle &gt;afterCompletion</p>\n</blockquote>\n<blockquote>\n<p>MyInterceptor2 执行顺序 preHandle &gt; preHandle &gt; postHandle &gt; afterCompletion</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>综上.对于concurrent类型的返回值，spring会启用一个新的线程来处理concurrent类型消息，在新的线程中会重新调用preHandle方法。</p>\n</blockquote>\n<h4 id=\"（2）-过滤器\"><a href=\"#（2）-过滤器\" class=\"headerlink\" title=\"（2） 过滤器\"></a>（2） 过滤器</h4><p>(1) 过滤器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(filterConfig.getInitParameter(<span class=\"string\">\"initParam\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"doFilter1 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 配置</p>\n<ul>\n<li><p>第一种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean&lt;MyFilter1&gt; <span class=\"title\">filterRegistrationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean&lt;MyFilter1&gt; filterRegistrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">    filterRegistrationBean.addUrlPatterns(<span class=\"string\">\"/*\"</span>);<span class=\"comment\">//过滤所有</span></span><br><span class=\"line\">    filterRegistrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter1());</span><br><span class=\"line\">    filterRegistrationBean.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\">    filterRegistrationBean.addInitParameter(<span class=\"string\">\"initParam\"</span>, <span class=\"string\">\"initOk\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MyFilter1 <span class=\"title\">myFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyFilter1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第三种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebFilter</span>(<span class=\"string\">\"/test/*\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MyFilter2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"DoFilter 2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>通过@WebFilter(“/test/*”)注解，首先需要@ServletComponentScan(“com.jiuxian”)</p>\n</blockquote>\n<blockquote>\n<p>Filter 全局拦截的配置(/<em>)和 Interceptor(/\\</em>*)有所区别需要注意</p>\n</blockquote>\n<h4 id=\"（3）-监听器\"><a href=\"#（3）-监听器\" class=\"headerlink\" title=\"（3） 监听器\"></a>（3） 监听器</h4><p>(1) 监听器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener1</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MyListener1 ... \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2) 配置方式和Filter类似</p>\n<ul>\n<li><p>第一种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean&lt;MyListener1&gt; <span class=\"title\">registrationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ServletListenerRegistrationBean&lt;MyListener1&gt; servletListenerRegistrationBean</span><br><span class=\"line\">            = <span class=\"keyword\">new</span> ServletListenerRegistrationBean&lt;&gt;();</span><br><span class=\"line\">    servletListenerRegistrationBean.setListener(<span class=\"keyword\">new</span> MyListener1());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> servletListenerRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MyListener1 <span class=\"title\">myListener1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyListener1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebListener</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener2</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletRequestListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestInitialized</span><span class=\"params\">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MyListener2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>使用@WebListener注解，首先需要@ServletComponentScan(“com.jiuxian”)</p>\n</blockquote>\n<blockquote>\n<p><strong><em>【注】以上代码基于springboot2.0</em></strong></p>\n</blockquote>\n<p><a href=\"https://github.com/Zejun-Liu/SpringBoot/blob/master/springboot-interceptor-filter-listener/README.md\" target=\"_blank\" rel=\"noopener\">GitHub源码地址</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(04) SpringBoot 定时任务Scheduled","date":"2019-05-20T02:19:14.000Z","path":"2019/05/20/SpringBoot/04-SpringBoot-定时任务Scheduled/","content":"<p>&emsp;&emsp;SpringBoot定时任务使用@EnableScheduling和@Scheduled这两个注解就能够简单实现，在集群环境下建议用Quartz等实现。<br><br>&emsp;&emsp;不多说看代码具体实现</p>\n<h3 id=\"1-首先开启对Scheduled的支持\"><a href=\"#1-首先开启对Scheduled的支持\" class=\"headerlink\" title=\"1.首先开启对Scheduled的支持\"></a>1.首先开启对Scheduled的支持</h3><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用-Scheduled注解\"><a href=\"#2-使用-Scheduled注解\" class=\"headerlink\" title=\"2.使用@Scheduled注解\"></a>2.使用@Scheduled注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(fixedDelay = <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTest1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scheduleTest1 Start.&gt;&gt;\"</span> + <span class=\"keyword\">new</span> Date().toLocaleString());</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scheduleTest1 End.&gt;&gt;\"</span> + <span class=\"keyword\">new</span> Date().toLocaleString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(fixedRate = <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTest2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scheduleTest2 Start.&gt;&gt;\"</span> + <span class=\"keyword\">new</span> Date().toLocaleString());</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scheduleTest2  End.&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 0/1 * * * ? \"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTest3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scheduleTest3 &gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(fixedRate = <span class=\"number\">2000</span>, initialDelay = <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTest4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scheduleTest2 fixedRate Start.&gt;&gt;\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scheduleTest2 fixedRate End.&gt;&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Scheduled注解中参数解释\"><a href=\"#3-Scheduled注解中参数解释\" class=\"headerlink\" title=\"3.Scheduled注解中参数解释\"></a>3.Scheduled注解中参数解释</h3><ul>\n<li>fixedDelay,fixedDelayString 都表式上次任务完成之后，多少毫秒后开始下一个任务<ul>\n<li>fixedDelay 传毫秒数</li>\n<li>fixedDelayString 毫秒的String值或者java.time.Duration 类型想匹配的时间 比如PT20.345S</li>\n</ul>\n</li>\n<li>fixedRate,fixedRateString 表式上次执行之后多少毫秒后开始下一个任务<ul>\n<li>fixedRate 传毫秒数</li>\n<li>fixedRateString 毫秒的String值或者java.time.Duration 类型想匹配的时间</li>\n</ul>\n</li>\n<li>initialDelay,initialDelayString 延迟多少毫秒执行</li>\n<li>cron 使用cron表达式来表示</li>\n</ul>\n<h3 id=\"4-那些坑\"><a href=\"#4-那些坑\" class=\"headerlink\" title=\"4.那些坑\"></a>4.那些坑</h3><ol>\n<li>首行启动之后他会自动查找org.springframework.scheduling.TaskScheduler的Bean或者是<br>或者名为“taskScheduler”的Bean或者 java.util.concurrent.ScheduledExecutorService的Bean 如果都找不到将会以本地单线程的方式执行。你会发现定时任务会一个执行完成之后才会执行下一个。</li>\n<li><p>如果是简单的通过@EnableAsync 然后再方法上注解@Async后，则fixedDelay/fixedDelayString参数将失效等同于fixedRate/fixedRateString,因为方法上加@Async注解之后等同于该方法为异步方法，不会等待任务完成</p>\n<h3 id=\"5-配置多线程执行\"><a href=\"#5-配置多线程执行\" class=\"headerlink\" title=\"5.配置多线程执行\"></a>5.配置多线程执行</h3></li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ScheduledExecutorService <span class=\"title\">scheduledExecutorService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TaskScheduler <span class=\"title\">taskScheduler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ThreadPoolTaskScheduler threadPoolTaskScheduler = <span class=\"keyword\">new</span> ThreadPoolTaskScheduler();</span><br><span class=\"line\">    threadPoolTaskScheduler.setPoolSize(<span class=\"number\">20</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> threadPoolTaskScheduler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">SchedulingConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureTasks</span><span class=\"params\">(ScheduledTaskRegistrar taskRegistrar)</span> </span>&#123;</span><br><span class=\"line\">        taskRegistrar.setScheduler(taskExecutor());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(destroyMethod = <span class=\"string\">\"shutdown\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">taskExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Executors.newScheduledThreadPool(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>【注】代码基于SpringBoot 2.0</p>\n</blockquote>\n</li>\n</ol>\n<p><a href=\"https://github.com/Zejun-Liu/SpringBoot/blob/master/springboot-schedule/Readme.md\" target=\"_blank\" rel=\"noopener\">GitHub源码</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(03) SpringBoot 对Future模式的支持","date":"2019-05-20T02:17:57.000Z","path":"2019/05/20/SpringBoot/03-SpringBoot-对Future模式的支持/","content":"<p>&emsp;&emsp;我们在实际项目中有些复杂运算、耗时操作，就可以利用多线程来充分利用CPU，提高系统吞吐量。SpringBoot对多线程支持非常好，对我们的开发非常便捷。<br><br>&emsp;&emsp;Future模式是多线程开发中非常常见的一种设计模式。核心思想是异步调用。当我们执行一个方法时，方法中有多个耗时任务需要同时去做，而且又不着急等待这个结果时可以让客户端立即返回然后，后台慢慢去计算任务。<br><br>&emsp;&emsp;当我们做一件事的时候需要等待，那么我们就可以在这个等待时间内来去做其它事情，这样就可以充分利用时间。比如我们点外卖，需要一段时间，那么我们在等外卖的时间里可以看点书，看个电影。这就是典型的Future模式。如果是普通模式的话，就是等外卖的时候就等外卖，外卖到了后再去看书，极大的浪费时间。<br><br>&emsp;&emsp;SpringBoot对Future模式支持非常好，只需要简单的代码就能实现。<br><a id=\"more\"></a></p>\n<h3 id=\"1-Future的相关方法\"><a href=\"#1-Future的相关方法\" class=\"headerlink\" title=\"1.Future的相关方法\"></a>1.Future的相关方法</h3><ul>\n<li>boolean cancel(boolean mayInterruptIfRunning);<br>  //可以在任务执行过程中取消任务</li>\n<li>boolean isCancelled();<br>  //判断Future任务是否取消</li>\n<li>boolean isDone();<br>  //判断任务是否完成</li>\n<li>V get();//获取任务最终结果，这是一个阻塞方法，会等待任务执行好才会执行后面的代码 </li>\n<li>V get(long timeout, TimeUnit unit);<br>//有等待时常的get方法，等待时间到了后仍然没有计算完成，则抛异常</li>\n</ul>\n<h3 id=\"2-需要的注解\"><a href=\"#2-需要的注解\" class=\"headerlink\" title=\"2.需要的注解\"></a>2.需要的注解</h3><p> &emsp;springboot 配置多线程需要两个注解</p>\n<ol>\n<li>@EnableAsync<br><br> 在配置类中通过加@EnableAsync开启对异步任务的支持</li>\n<li>@Async<br><br> 在需要执行的方法上加@Async表明该方法是个异步方法，如果加在类级别上，则表明类所有的方法都是异步方法</li>\n</ol>\n<h3 id=\"3-配置代码\"><a href=\"#3-配置代码\" class=\"headerlink\" title=\"3.配置代码\"></a>3.配置代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">AsyncConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">getAsyncExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor taskExecutor = <span class=\"keyword\">new</span> ThreadPoolTaskExecutor();</span><br><span class=\"line\">        <span class=\"comment\">//核心线程数</span></span><br><span class=\"line\">        taskExecutor.setCorePoolSize(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"comment\">//最大线程数</span></span><br><span class=\"line\">        taskExecutor.setMaxPoolSize(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"comment\">//队列大小</span></span><br><span class=\"line\">        taskExecutor.setQueueCapacity(<span class=\"number\">100</span>);</span><br><span class=\"line\">        taskExecutor.initialize();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> taskExecutor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-FutureService\"><a href=\"#4-FutureService\" class=\"headerlink\" title=\"4.FutureService\"></a>4.FutureService</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Future&lt;String&gt; <span class=\"title\">futureTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"任务执行开始,需要：1000ms\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"do:\"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"完成任务\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AsyncResult&lt;&gt;(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>【注】这里的方法自动被注入使用上文配置的ThreadPoolTaskExecutor</p>\n</blockquote>\n<h3 id=\"5-测试代码\"><a href=\"#5-测试代码\" class=\"headerlink\" title=\"5.测试代码\"></a>5.测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> FutureService futureService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">futureTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"开始\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//耗时任务</span></span><br><span class=\"line\">    Future&lt;String&gt; future = futureService.futureTest();</span><br><span class=\"line\">    <span class=\"comment\">//另外一个耗时任务</span></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"另外一个耗时任务，需要500ms\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    String s = future.get();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"计算结果输出:\"</span> + s);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"共耗时：\"</span> + (System.currentTimeMillis() - start));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-运行结果\"><a href=\"#6-运行结果\" class=\"headerlink\" title=\"6.运行结果\"></a>6.运行结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始</span><br><span class=\"line\">2019-01-07 23:50:34.726  INFO 14648 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService</span><br><span class=\"line\">任务执行开始,需要：1000ms</span><br><span class=\"line\">do:0</span><br><span class=\"line\">do:1</span><br><span class=\"line\">do:2</span><br><span class=\"line\">do:3</span><br><span class=\"line\">另外一个耗时任务，需要500ms</span><br><span class=\"line\">do:4</span><br><span class=\"line\">do:5</span><br><span class=\"line\">do:6</span><br><span class=\"line\">do:7</span><br><span class=\"line\">do:8</span><br><span class=\"line\">do:9</span><br><span class=\"line\">完成任务</span><br><span class=\"line\">计算结果输出:ThreadPoolTaskExecutor-1</span><br><span class=\"line\">共耗时：1016</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p><strong>本来需要至少1500ms 执行的任务现在只需要1016ms,<br>因为在执行耗时任务1的同时也在执行耗时任务2，两个任务并行执行，这就是future模式的好处，在等待时间内去执行其它任务，能够充分利用时间</strong></p>\n<blockquote>\n<p>【注】本文基于SpringBoot 2.0</p>\n</blockquote>\n<p><a href=\"https://github.com/drinkagain/SpringBoot/blob/master/springboot-future/Readme.md\" target=\"_blank\" rel=\"noopener\">GitHub 连接</a></p>\n<p><br></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(2) SpringBoot 对多线程的支持","date":"2019-05-20T02:16:11.000Z","path":"2019/05/20/SpringBoot/02-SpringBoot-对多线程的支持/","content":"<p>&emsp;&emsp;我们在实际项目中有些复杂运算、耗时操作，就可以利用多线程来充分利用CPU，提高系统吞吐量。SpringBoot对多线程支持非常好，对我们的开发非常便捷。<br></p>\n<h3 id=\"1-需要的注解\"><a href=\"#1-需要的注解\" class=\"headerlink\" title=\"1.需要的注解\"></a>1.需要的注解</h3><p> &emsp;springboot 配置多线程需要两个注解<br> <a id=\"more\"></a></p>\n<ol>\n<li>@EnableAsync<br><br> 在配置类中通过加@EnableAsync开启对异步任务的支持</li>\n<li>@Async<br><br> 在需要执行的方法上加@Async表明该方法是个异步方法，如果加在类级别上，则表明类所有的方法都是异步方法<h3 id=\"2-配置代码\"><a href=\"#2-配置代码\" class=\"headerlink\" title=\"2.配置代码\"></a>2.配置代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">AsyncConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">getAsyncExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor taskExecutor = <span class=\"keyword\">new</span> ThreadPoolTaskExecutor();</span><br><span class=\"line\">        <span class=\"comment\">//核心线程数</span></span><br><span class=\"line\">        taskExecutor.setCorePoolSize(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"comment\">//最大线程数</span></span><br><span class=\"line\">        taskExecutor.setMaxPoolSize(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"comment\">//队列大小</span></span><br><span class=\"line\">        taskExecutor.setQueueCapacity(<span class=\"number\">100</span>);</span><br><span class=\"line\">        taskExecutor.initialize();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> taskExecutor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-Service\"><a href=\"#3-Service\" class=\"headerlink\" title=\"3.Service\"></a>3.Service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">executeAsync1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"异步任务::1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">executeAsync2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"异步任务::2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>【注】这里的方法自动被注入使用上文配置的ThreadPoolTaskExecutor</p>\n</blockquote>\n<h3 id=\"4-测试代码\"><a href=\"#4-测试代码\" class=\"headerlink\" title=\"4.测试代码\"></a>4.测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AsyncService asyncService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">asyncTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        asyncService.executeAsync1();</span><br><span class=\"line\">        asyncService.executeAsync2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-运行结果\"><a href=\"#5-运行结果\" class=\"headerlink\" title=\"5.运行结果\"></a>5.运行结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::2</span><br><span class=\"line\">异步任务::1</span><br><span class=\"line\">异步任务::1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>【注】本文基于SpringBoot 2.0</p>\n</blockquote>\n<p><a href=\"https://github.com/drinkagain/SpringBoot/blob/master/springboot-future/Readme.md\" target=\"_blank\" rel=\"noopener\">GitHub 连接</a></p>\n<p><br><br>感谢《Spring Boot实战 JavaEE开发的颠覆者》</p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(01)SpringBoot EL获取配置文件中的值的方式","date":"2019-05-20T01:43:28.000Z","path":"2019/05/20/SpringBoot/01-SpringBoot-EL获取配置文件中的值的方式/","content":"<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><ul>\n<li>为了方便IO操作，引入了commons-io<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;2.6&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>application.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">book:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">熊猫酒仙_</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>resouces 下新建一个test文件夹，文件夹下一个test.txt文件,文件内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"二、代码\"><a href=\"#二、代码\" class=\"headerlink\" title=\"二、代码\"></a>二、代码</h3><ul>\n<li><p>OtherService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OtherService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"测试其它类的属性\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String another;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAnother</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> another;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAnother</span><span class=\"params\">(String another)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.another = another;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ElConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入普通字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"I Love Java\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String normal;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入操作系统属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"#&#123;systemProperties['os.name']&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String osName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入表达式结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"#&#123;T(java.lang.Math).random()*100 &#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> random;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入其它Bean的属性(其它Bean的属性需要get set 方法，或者 public)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"#&#123;otherService.another&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fromAnother;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"classpath:/test/test.txt\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource testFile;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入网址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource testUrl;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入配置文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;book.name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入配置文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getSecret</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(normal);</span><br><span class=\"line\">            System.out.println(osName);</span><br><span class=\"line\">            System.out.println(random);</span><br><span class=\"line\">            System.out.println(fromAnother);</span><br><span class=\"line\">            System.out.println(IOUtils.toString(testFile.getInputStream(), <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">            System.out.println(IOUtils.toString(testUrl.getInputStream(), <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">            System.out.println(userName);</span><br><span class=\"line\">            <span class=\"comment\">//注入配置文件</span></span><br><span class=\"line\">            System.out.println(environment.getProperty(<span class=\"string\">\"book.name\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"三、测试\"><a href=\"#三、测试\" class=\"headerlink\" title=\"三、测试\"></a>三、测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootAopApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ElConfig elConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">elConfigTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        elConfig.getSecret();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、输出\"><a href=\"#四、输出\" class=\"headerlink\" title=\"四、输出\"></a>四、输出</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I Love You</span><br><span class=\"line\">Windows 10</span><br><span class=\"line\">8.226641172488735</span><br><span class=\"line\">测试其它类的属性</span><br><span class=\"line\">Test</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class=&quot;bg s_ipt_wr&quot;&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class=&quot;bg s_btn_wr&quot;&gt;&lt;input type=submit id=su value=百度一下 class=&quot;bg s_btn&quot;&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地图&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;视频&lt;/a&gt; &lt;a href=http://tieba.baidu.com name=tj_trtieba class=mnav&gt;贴吧&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb&gt;登录&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write(&apos;&lt;a href=&quot;http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=&apos;+ encodeURIComponent(window.location.href+ (window.location.search === &quot;&quot; ? &quot;?&quot; : &quot;&amp;&quot;)+ &quot;bdorz_come=1&quot;)+ &apos;&quot; name=&quot;tj_login&quot; class=&quot;lb&quot;&gt;登录&lt;/a&gt;&apos;);&lt;/script&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style=&quot;display: block;&quot;&gt;更多产品&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a href=http://home.baidu.com&gt;关于百度&lt;/a&gt; &lt;a href=http://ir.baidu.com&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href=http://www.baidu.com/duty/&gt;使用百度前必读&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;意见反馈&lt;/a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">熊猫酒仙_</span><br><span class=\"line\">熊猫酒仙_</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、GitHub源码地址\"><a href=\"#五、GitHub源码地址\" class=\"headerlink\" title=\"五、GitHub源码地址\"></a>五、GitHub源码地址</h3><p><a href=\"https://github.com/drinkagain/SpringBoot2.0/tree/master/springboot-el\" target=\"_blank\" rel=\"noopener\">GitHub源码: https://github.com/drinkagain/SpringBoot2.0/tree/master/springboot-el</a></p>\n","link":"","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"Hello World","date":"2019-05-20T01:19:25.703Z","path":"2019/05/20/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","link":"","categories":[],"tags":[]}]